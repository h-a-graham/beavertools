theme(legend.position = "bottom")
terr_pred
terr_pred <- ggplot(hacked_df, aes(x=year_adj, y=.fitted, colour=cap_name, fill=cap_name))+
geom_hline(yintercept=lower_capacity, linetype=4, lwd=0.3)+
geom_hline(yintercept=upper_capacity, linetype=4, lwd=0.3)+
# geom_line(data=new_data, aes(y = .log.fitted), colour='#000E54', lwd=1.2, linetype=3) +
geom_line(lwd=1.2) +
geom_ribbon(aes(ymin = conf.low, ymax = conf.high),
alpha=0.2, linetype=2, lwd=0.2) +
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.8)+
# stat_smooth(method="lm",formula='y ~ poly(x, 2)', fullrange=TRUE, colour='#43B1FF', se=F) +
# geom_smooth(method = "glm", formula = y~x,
#               method.args = list(family = poisson(link = 'log')), fullrange=TRUE) +
# geom_vline(xintercept=HalfCap, linetype=4, lwd=0.3)+
annotate("text", x=2015.5, y = lower_capacity + 5, label = "Predicted territory capacity: Open Network", size=3) +
annotate("text", x=2015, y = upper_capacity + 5, label = "Predicted territory capacity: MM Network", size=3) +
scale_fill_manual(values = c("#d95f02", "#7570b3"), name=NULL)+
scale_colour_manual(values = c("#d95f02", "#7570b3"), name=NULL)+
# xlim(lubridate::dmy(c("30-12-2007", "30-12-2050"))) +
# xlim(0,100) +
# ylim(0,1000) +
# coord_cartesian(ylim=c(0,100), xlim = c(0,50))+
coord_cartesian(ylim=c(0,260), xlim = c(2007, 2055))+
# coord_cartesian(ylim=c(0,100), xlim = lubridate::dmy(c("30-12-2007", "30-12-2031")))+
labs(x = 'year', y="n territories", subtitle="Beaver territory expansion in R. Otter Catchment???")+
theme_bw() +
theme(legend.position = "bottom")
terr_pred
ggsave(file.path(plot_dir, 'Territory_predictionMMvsORN.png'),
plot = terr_pred, dpi=300, height=7, width=7)
plot_dir <- file.path(here::here(),"R_Otter_workflow/3_Pop_expansion_predictions/plots")
ggsave(file.path(plot_dir, 'Territory_predictionMMvsORN.png'),
plot = terr_pred, dpi=300, height=7, width=7)
?forage_density
ROBT_201920 <- RivOtter_FeedSigns %>%
dplyr::filter(SurveySeason == "2019 - 2020")%>%
forage_density(., 'FeedCat')
RivOtter_FeedSigns
raster::plot(ROBT_201920)
beavertools::plot_forage_density(ROBT_201920)
?estimate_territories
CS_201920 <- RivOtter_OtherSigns %>%
dplyr::filter(SurveySeason == "2019 - 2020")
# run territory classification
otter_poly <- estimate_territories(ROBT_201920, confirm_signs = CS_201920)
plot_territories(otter_poly)
plot_territories(otter_poly, 'terr_status')
check_auto_terr(otter_poly)
reclass_test <- user_classify(otter_poly, territory = c(10,27, 28), possible=c(25,35))
plot_territories(reclass_test, fill_name = 'user_class')
?forage_density
?estimate_territories
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
Real_terrs[[1]]
#------- Observed territory Habitat stats ----------
plot_names <- unique(RivOtter_FeedSigns$SurveySeason)
Real_terrs %>%
purrr::map2(.x=., .y=plot_names, ~mutate(.x, SurveySeason = .y)) %>%
bind_rows()
?bind_rows
Real_terrs %>%
purrr::map2(.x=., .y=plot_names, ~mutate(.x, SurveySeason = .y)) %>%
bind_rows() %>%
Real_terrs %>%
purrr::map2(.x=., .y=plot_names, ~mutate(.x, SurveySeason = .y)) %>%
bind_rows() %>%
st_drop_geometry()
Real_terrs %>%
purrr::map2(.x=., .y=plot_names, ~mutate(.x, SurveySeason = .y)) %>%
bind_rows() %>%
st_drop_geometry()
Real_terrs[[6]]
Real_terrs %>%
purrr::map2(.x=., .y=plot_names, ~ mutate(.x, SurveySeason = .y)%>% rownames(.)<-NULL) %>%
bind_rows() %>%
st_drop_geometry()
Real_terrs %>%
purrr::map2(.x=., .y=plot_names, ~ mutate(.x, SurveySeason = .y)%>% rownames(.x)<-NULL) %>%
bind_rows() %>%
st_drop_geometry()
Real_terrs %>%
purrr::map2(.x=., .y=plot_names, ~ mutate(.x, SurveySeason = .y)) %>%
bind_rows() %>%
st_drop_geometry()
MMRN_pot_terr2_5 <- MMRN_pot_terr
MMRN_terr_cap <- run_terr_cap(MMRN_pot_terr2_5, 2.5)
# devtools::document()
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
devtools::load_all()
export_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
plot_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/plots")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# MasterMap River Network not released with the package due to licensing issues.
MMRN_BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg') # MasterMap Data
# OS Open Rivers Network - included with the package
ORN_BeavNetOtter <- RivOtter_BeaverNet
# ---------- run terriroty generation for all reaches for each network
run_terr_gen <- function(riv_network, overwrite=FALSE, save_out=TRUE){
fileName <- file.path(export_dir, paste('PT_', deparse(substitute(riv_network)),'.Rds', sep=""))
# print(fileName)
if (file.exists(fileName) && isFALSE(overwrite)){
message(sprintf("Potential territrories created in: %s", fileName))
message("Loading previously generated file...")
terr_out <- readRDS(fileName)
} else{
t1 <- Sys.time()
terr_out <-  gen_territories(riv_network)
if (isTRUE(save_out)){
saveRDS(terr_out, file=fileName)
}
message(sprintf('Potential Territory Generation Run Time = %s minutes', round(Sys.time()-t1,1)))
}
return(terr_out)
}
ORN_pot_terr <- run_terr_gen(ORN_BeavNetOtter)
MMRN_pot_terr <- run_terr_gen(MMRN_BeavNetOtter)
# ------------- Run territory cap -------------
run_terr_cap <- function(pot_terrs, veg, overwrite=FALSE, save_out=TRUE){
fileName <- file.path(export_dir, paste('TC_', deparse(substitute(pot_terrs)),'.Rds', sep=""))
# print(fileName)
if (file.exists(fileName) && isFALSE(overwrite)){
message(sprintf("Territory capacity created in: %s", fileName))
message("Loading previously generated file...")
cap_out <- readRDS(fileName)
} else {
t1 <- Sys.time()
cap_out <-territory_cap(pot_terrs, min_veg = veg , multicore = TRUE)
if (isTRUE(save_out)){
saveRDS(cap_out, file=fileName)
}
message(sprintf('Territory Capacity Run Time = %s minutes', round(Sys.time()-t1,1)))
}
return(cap_out)
}
ORN_terr_cap <- run_terr_cap(ORN_pot_terr, 1.5)
MMRN_terr_cap <- run_terr_cap(MMRN_pot_terr, 1.5)
MMRN_pot_terr2_5 <- MMRN_pot_terr
MMRN_terr_cap <- run_terr_cap(MMRN_pot_terr2_5, 2.5)
MMRN_terr_cap
capacity_plot <- function(ORN_cap, MMRN_cap){
p1 <- plot_capacity(ORN_cap, buffer=50, basemap = F, catchment = RivOtter_Catch_Area,
river_net = ORN_BeavNetOtter, plot_extent = target_ext, north_arrow = F,
scalebar = F, axes_units = F)
p2 <- plot_capacity(MMRN_cap, buffer=50, basemap = F, catchment = RivOtter_Catch_Area,
river_net = MMRN_BeavNetOtter, plot_extent = target_ext, axes_units = F)
p3 <- p1 + p2 + plot_annotation(
caption = 'Contains: © OpenStreetMap contributors, \n
OS data © Crown copyright and database right 2021'
)
return(p3)
}
capacity_plot(ORN_terr_cap, MMRN_terr_cap) %>%
ggsave(filename = file.path(plot_dir, 'OSMM_terrs.jpg'),plot = ., dpi=300, height=7, width=10)
MMRN_terr_cap
MMRN_terr_cap %>%
ggplot(., aes(y=BFI_40m))+
geom_boxplot()
MMRN_terr_cap <- run_terr_cap(MMRN_pot_terr, 1.5)
MMRN_terr_cap %>%
ggplot(., aes(y=BFI_40m))+
geom_boxplot()
ORN_BeavNetOtter
ORN_pot_terr
devtools::document()
devtools::load_all()
# ------------ imports --------------------
devtools::install()
# ------------ imports --------------------
devtools::install()
# ------------ imports --------------------
# devtools::install()
# devtools::document()
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
devtools::load_all()
export_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
plot_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/plots")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# MasterMap River Network not released with the package due to licensing issues.
MMRN_BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg') # MasterMap Data
# OS Open Rivers Network - included with the package
ORN_BeavNetOtter <- RivOtter_BeaverNet
# ---------- run terriroty generation for all reaches for each network
run_terr_gen <- function(riv_network, overwrite=FALSE, save_out=TRUE){
fileName <- file.path(export_dir, paste('PT_', deparse(substitute(riv_network)),'.Rds', sep=""))
# print(fileName)
if (file.exists(fileName) && isFALSE(overwrite)){
message(sprintf("Potential territrories created in: %s", fileName))
message("Loading previously generated file...")
terr_out <- readRDS(fileName)
} else{
t1 <- Sys.time()
terr_out <-  gen_territories(riv_network)
if (isTRUE(save_out)){
saveRDS(terr_out, file=fileName)
}
message(sprintf('Potential Territory Generation Run Time = %s minutes', round(Sys.time()-t1,1)))
}
return(terr_out)
}
ORN_BeavNetOtterNEW <- ORN_BeavNetOtter
ORN_pot_terr <- run_terr_gen(ORN_BeavNetOtterNEW)
ORN_pot_terr
t_out <- gen_territories(ORN_BeavNetOtterNEW, multicore = F)
# ------------ imports --------------------
devtools::install()
# devtools::document()
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
devtools::load_all()
export_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
plot_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/plots")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# MasterMap River Network not released with the package due to licensing issues.
MMRN_BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg') # MasterMap Data
# OS Open Rivers Network - included with the package
ORN_BeavNetOtter <- RivOtter_BeaverNet
ORN_BeavNetOtterNEW <- ORN_BeavNetOtter
t_out <- gen_territories(ORN_BeavNetOtterNEW, multicore = F)
# ------------ imports --------------------
devtools::install()
# devtools::document()
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
devtools::load_all()
t_out <- gen_territories(ORN_BeavNetOtterNEW, multicore = T)
t_out
# ------------ imports --------------------
devtools::install()
# devtools::document()
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
devtools::load_all()
export_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
plot_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/plots")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# MasterMap River Network not released with the package due to licensing issues.
MMRN_BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg') # MasterMap Data
# OS Open Rivers Network - included with the package
ORN_BeavNetOtter <- RivOtter_BeaverNet
t_out <- gen_territories(ORN_BeavNetOtterNEW, multicore = T)
ORN_BeavNetOtterNEW <- ORN_BeavNetOtter
t_out <- gen_territories(ORN_BeavNetOtterNEW, multicore = T)
t_out
ORN_BeavNetOtter
MMRN_BeavNetOtter
t_out
ggplot(t_out) +
geom_boxplot(aes(y=Str_order))+
geom_boxplot(aes(y=str_order()))
ggplot(t_out) +
geom_boxplot(aes(y=Str_order))+
geom_boxplot(aes(y=str_Ord))
ggplot(t_out) +
geom_boxplot(aes(y=Str_order))+
geom_boxplot(aes(y=Str_Ord))
ggplot(t_out) +
geom_boxplot(aes(y=Str_order))
ggplot(t_out) +
geom_boxplot(aes(y=Str_Ord))
ggplot(t_out) +
geom_histogram(aes(x=Str_Ord))
ggplot(t_out) +
geom_histogram(aes(x=Str_order))
devtools::load_all()
# ------------ imports --------------------
devtools::install()
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
devtools::load_all()
t_out <- gen_territories(ORN_BeavNetOtterNEW, multicore = T)
t_out
devtools::load_all()
t_out <- gen_territories(ORN_BeavNetOtterNEW, multicore = T)
devtools::install()
# devtools::document()
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
devtools::load_all()
export_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
plot_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/plots")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
# ------------ Read Data ------------------
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# MasterMap River Network not released with the package due to licensing issues.
MMRN_BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg') # MasterMap Data
# OS Open Rivers Network - included with the package
ORN_BeavNetOtter <- RivOtter_BeaverNet
ORN_BeavNetOtterNEW <- ORN_BeavNetOtter
t_out <- gen_territories(ORN_BeavNetOtterNEW, multicore = F)
reach %>%
sf::st_buffer(buff) %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"))%>%
sf::st_buffer(0.1)
terr_line <- reach %>%
sf::st_buffer(buff) %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"))%>%
sf::st_buffer(0.1)
reach %>%
sf::st_buffer(buff) %>%
sf::st_intersection(river)
reach %>%
sf::st_buffer(buff) %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.)))
reach %>%
sf::st_buffer(buff) %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.)))
reach %>%
sf::st_buffer(buff) %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"))%>%
sf::st_buffer(0.1)
reach %>%
sf::st_buffer(buff) %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"))
reach %>%
sf::st_buffer(buff) %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
sf::st_buffer(0.1) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"))
reach %>%
sf::st_buffer(buff) %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
sf::st_buffer(0.1) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"))
if (sf::st_geometry_type(terr_line)=='MULTIPOLYGON'){
att <- attempt + 1
terr_line <- sf::st_cast(terr_line, to= 'POLYGON') %>%
dplyr::mutate(area = sf::st_area(.)) %>%
dplyr::filter(area == max(area))  %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
sf::st_buffer(0.1) %>%
dplyr::summarise(across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"))
}
terr_line <- sf::st_cast(terr_line, to= 'POLYGON') %>%
dplyr::mutate(area = sf::st_area(.)) %>%
dplyr::filter(area == max(area))  %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
sf::st_buffer(0.1) %>%
dplyr::summarise(across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"))
terr_line <- reach %>%
sf::st_buffer(buff) %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
sf::st_buffer(0.1) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"))
terr_line <- sf::st_cast(terr_line, to= 'POLYGON') %>%
dplyr::mutate(area = sf::st_area(.)) %>%
dplyr::filter(area == max(area))  %>%
sf::st_intersection(river) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
sf::st_buffer(0.1) %>%
dplyr::summarise(across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"))
devtools::load_all()
# ------------ imports --------------------
devtools::install()
t_out <- gen_territories(ORN_BeavNetOtterNEW, multicore = T)
t_out
devtools::load_all()
# ------------ imports --------------------
devtools::install()
export_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
plot_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/plots")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
# ------------ Read Data ------------------
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# MasterMap River Network not released with the package due to licensing issues.
MMRN_BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg') # MasterMap Data
# OS Open Rivers Network - included with the package
ORN_BeavNetOtter <- RivOtter_BeaverNet
# ---------- run terriroty generation for all reaches for each network
run_terr_gen <- function(riv_network, overwrite=FALSE, save_out=TRUE){
fileName <- file.path(export_dir, paste('PT_', deparse(substitute(riv_network)),'.Rds', sep=""))
# print(fileName)
if (file.exists(fileName) && isFALSE(overwrite)){
message(sprintf("Potential territrories created in: %s", fileName))
message("Loading previously generated file...")
terr_out <- readRDS(fileName)
} else{
t1 <- Sys.time()
terr_out <-  gen_territories(riv_network)
if (isTRUE(save_out)){
saveRDS(terr_out, file=fileName)
}
message(sprintf('Potential Territory Generation Run Time = %s minutes', round(Sys.time()-t1,1)))
}
return(terr_out)
}
ORN_pot_terr <- run_terr_gen(ORN_BeavNetOtterNEW, overwrite = T)
# ------------- Run territory cap -------------
run_terr_cap <- function(pot_terrs, veg, overwrite=FALSE, save_out=TRUE){
fileName <- file.path(export_dir, paste('TC_', deparse(substitute(pot_terrs)),'.Rds', sep=""))
# print(fileName)
if (file.exists(fileName) && isFALSE(overwrite)){
message(sprintf("Territory capacity created in: %s", fileName))
message("Loading previously generated file...")
cap_out <- readRDS(fileName)
} else {
t1 <- Sys.time()
cap_out <-territory_cap(pot_terrs, min_veg = veg , multicore = TRUE)
if (isTRUE(save_out)){
saveRDS(cap_out, file=fileName)
}
message(sprintf('Territory Capacity Run Time = %s minutes', round(Sys.time()-t1,1)))
}
return(cap_out)
}
ORN_terr_cap <- run_terr_cap(ORN_pot_terr, 1.5)
View(ORN_pot_terr)
ORN_pot_terr
ORN_pot_terrNEW <-ORN_pot_terr
ORN_terr_cap <- run_terr_cap(ORN_pot_terrNEW, 1.5)
devtools::load_all()
# ------------ imports --------------------
devtools::install()
ORN_terr_cap <- run_terr_cap(ORN_pot_terrNEW, 1.5)
ORN_terr_cap
plot_capacity(ORN_terr_cap)
MMRN_BeavNetOtterNEW <-MMRN_BeavNetOtter
MMRN_pot_terr <- run_terr_gen(MMRN_BeavNetOtterNEW)
MMRN_terr_cap
MMRN_pot_terr
MMRN_terr_cap <- run_terr_cap(MMRN_pot_terrNEW, 1.5)
MMRN_pot_terrNEW <- MMRN_pot_terr
MMRN_terr_cap <- run_terr_cap(MMRN_pot_terrNEW, 1.5)
MMRN_terr_cap
ORN_terr_cap <- run_terr_cap(ORN_pot_terrNEW, 1.5)
capacity_plot <- function(ORN_cap, MMRN_cap){
p1 <- plot_capacity(ORN_cap, buffer=50, basemap = F, catchment = RivOtter_Catch_Area,
river_net = ORN_BeavNetOtter, plot_extent = target_ext, north_arrow = F,
scalebar = F, axes_units = F)
p2 <- plot_capacity(MMRN_cap, buffer=50, basemap = F, catchment = RivOtter_Catch_Area,
river_net = MMRN_BeavNetOtter, plot_extent = target_ext, axes_units = F)
p3 <- p1 + p2 + plot_annotation(
caption = 'Contains: © OpenStreetMap contributors, \n
OS data © Crown copyright and database right 2021'
)
return(p3)
}
capacity_plot(ORN_terr_cap, MMRN_terr_cap) %>%
ggsave(filename = file.path(plot_dir, 'OSMM_terrs.jpg'),plot = ., dpi=300, height=7, width=10)
rnorm(1, 1630, 293)
rnorm(1, 1630, 293)
rnorm(1, 1630, 293)
rnorm(1, 1630, 293)
1630-293
?rnorm
rnorm(1, 1630, 1)
?sample
sample(c(0,1), 100, replace = TRUE)
sample(c(0:1), 100, replace = TRUE)
?runif
punif(1, min = 0, max = 1)
punif(10, min = 0, max = 1)
punif(10, min = 0, max = 1000)
runif(1, min = 1630-293, max = 1630+293)
# ------------ imports --------------------
devtools::install()
devtools::load_all()
ORN_pot_terr <- run_terr_gen(ORN_BeavNetOtterNEW, overwrite = T)
ORN_pot_terrNEW <-ORN_pot_terr
ORN_terr_cap <- run_terr_cap(ORN_pot_terrNEW, 1.5)
ORN_terr_cap <- run_terr_cap(ORN_pot_terrNEW, 1.5, overwrite = T)
ORN_terr_cap
