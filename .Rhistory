labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictiond.png'),
dpi=600, height=180, width=180, units='mm')
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.9)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# scale_colour_viridis_c(option='turbo')+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.vjust=10)) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), shape=21, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2040))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictiond.png'),
dpi=600, height=180, width=180, units='mm')
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.9)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# scale_colour_viridis_c(option='turbo')+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.hjust=-5)) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), shape=21, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2040))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictiond.png'),
dpi=600, height=180, width=180, units='mm')
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.9)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# scale_colour_viridis_c(option='turbo')+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.hjust=-50)) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), shape=21, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2040))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictiond.png'),
dpi=600, height=180, width=180, units='mm')
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.9)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# scale_colour_viridis_c(option='turbo')+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", label.hjust=50)) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), shape=21, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2040))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictiond.png'),
dpi=600, height=180, width=180, units='mm')
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.9)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# scale_colour_viridis_c(option='turbo')+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", label.hjust=1)) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), shape=21, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2040))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictiond.png'),
dpi=600, height=180, width=180, units='mm')
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.9)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# scale_colour_viridis_c(option='turbo')+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", label.hjust=-1)) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), shape=21, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2040))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictiond.png'),
dpi=600, height=180, width=180, units='mm')
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.9)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# scale_colour_viridis_c(option='turbo')+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.hjust=1)) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), shape=21, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2040))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictiond.png'),
dpi=600, height=180, width=180, units='mm')
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.9)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# scale_colour_viridis_c(option='turbo')+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.vjust=1)) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), shape=21, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2040))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictiond.png'),
dpi=600, height=180, width=180, units='mm')
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))), lwd=0.5, alpha=0.7) +
# scale_colour_viridis_c(option='turbo')+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.vjust=1)) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
# function to generate the desired pop dynamics plots.
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))), lwd=0.5, alpha=0.7) +
# scale_colour_viridis_c(option='turbo')+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.vjust=1)) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
# create stacked plot.
long_df %>%
pop.dynams(., 'years_since', "Years since establishment", "none")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=600, height=180, width=180, units='mm')
# create plot.
p <- mgmt_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# shows range of unmanaged scenario
stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
### This gives just the lines
geom_line(aes(y=mgmt_growth, group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.5)+
# scale_colour_viridis_c(option='turbo') +
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.vjust=1)) +
facet_grid(mgmt_removed ~ mgmt_year ) +
# define plot style n stuff
coord_cartesian(ylim=c(8,upper_capacity +5), xlim = c(2007, 2060))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0)))
add_general_facet_labs(p, 'n territories removed each year', ' Year managment starts') %>%
ggsave(file.path(plot_dir, 'MgmtDynamics.png'), .,
dpi=600, height=180, width=180, units='mm')
binman::list_versions('chrome')
binman::list_versions('chromedriver')
1630-293
1630+293
library(beavertools)
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
#-------------define folder root -------------
export_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
plot_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/plots")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
# ------------ Read Data ------------------
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# MasterMap River Network not released with the package due to licensing issues.
MMRN_BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg') # MasterMap Data
# OS Open Rivers Network - included with the package
# ORN_BeavNetOtter <- RivOtter_BeaverNet
#------- Observed territory Habitat stats ----------
# need to calculate some stats here and find out what kind of BFI values we're currently seeing on the Otter.
terr_list <- readRDS(file=file.path(here::here(),'R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list2.Rds'))
survey_years <- unique(RivOtter_FeedSigns$SurveySeason)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
lower_BFI <- round(min(Terr_df$mean_BFI_40m),1)
upper_BFI <- round(mean(Terr_df$mean_BFI_40m), 1)
message(sprintf("Lower BFI threshold: %s \nUpper BFI threshold: %s",lower_BFI, upper_BFI))
# ---------- run terriroty generation for all reaches for each network
run_terr_gen <- function(riv_network, overwrite=FALSE, save_out=TRUE){
fileName <- file.path(export_dir, paste('PT_', deparse(substitute(riv_network)),'.Rds', sep=""))
# print(fileName)
if (file.exists(fileName) && isFALSE(overwrite)){
message(sprintf("Potential territrories created in: %s", fileName))
message("Loading previously generated file...")
terr_out <- readRDS(fileName)
} else{
t1 <- Sys.time()
terr_out <-  gen_territories(riv_network, multicore = T, progbar = T)
if (isTRUE(save_out)){
saveRDS(terr_out, file=fileName)
}
message(sprintf('Potential Territory Generation Run Time = %s minutes', round(Sys.time()-t1,1)))
}
return(terr_out)
}
MMRN_BeavNetOtter
RivOtter_Terrs <- run_terr_gen(MMRN_BeavNetOtter)
RivOtter_Terrs
nrow(MMRN_BeavNetOtter)
nrow(MMRN_BeavNetOtter) - nrow(RivOtter_Terrs)
(nrow(MMRN_BeavNetOtter) - nrow(RivOtter_Terrs))/nrow(MMRN_BeavNetOtter)*100
terrs_union <- sf::st_union(MMRN_BeavNetOtter)
terrs_union
terrs_union <- sf::st_union(MMRN_BeavNetOtter) %>%
st_as_as()
terrs_union <- sf::st_union(MMRN_BeavNetOtter) %>%
st_as_sf()
ggplot(terrs_union)%>%
plot_sf()
ggplot(terrs_union)%>%
geom_sf()
ggplot(terrs_union)+
geom_sf()
ggplot()+
geom_sf(terrs_union) +
# ggplot(RivOtter_Terrs, aes(x=Terr_Leng))+
#   geom_density()
# ------------- Run territory cap -------------
run_terr_cap <- function(pot_terrs, veg, overwrite=FALSE, save_out=TRUE){
fileName <- file.path(export_dir, paste('TC_', deparse(substitute(pot_terrs)),'.Rds', sep=""))
# print(fileName)
if (file.exists(fileName) && isFALSE(overwrite)){
message(sprintf("Territory capacity created in: %s", fileName))
message("Loading previously generated file...")
cap_out <- readRDS(fileName)
} else {
t1 <- Sys.time()
cap_out <-territory_cap(pot_terrs, min_veg = veg , multicore = TRUE)
if (isTRUE(save_out)){
saveRDS(cap_out, file=fileName)
}
message(sprintf('Territory Capacity Run Time = %s minutes', round(Sys.time()-t1,1)))
}
return(cap_out)
}
ggplot()+
geom_sf(terrs_union)
ggplot(MMRN_BeavNetOtter)+
geom_sf()
terrs_union
ggplot()+
geom_sf(terrs_union, aes(colour=x)) +
gem_sf(MMRN_BeavNetOtter)
MMRN_BeavNetOtter
ggplot()+
geom_sf(terrs_union, aes(fill=x)) +
gem_sf(MMRN_BeavNetOtter)
ggplot()+
geom_sf(terrs_union, aes(fill=x)) +
gem_sf(MMRN_BeavNetOtter, aes(colour=Str_order))
ggplot()+
geom_sf(terrs_union, mapping= aes(fill=x)) +
geom_sf(MMRN_BeavNetOtter, aes(colour=Str_order))
ggplot()+
geom_sf(terrs_union, mapping= aes(fill=x)) +
geom_sf(MMRN_BeavNetOtter, mapping= aes(colour=Str_order))
ggplot()+
geom_sf(terrs_union, mapping= aes()) +
geom_sf(MMRN_BeavNetOtter, mapping= aes())
ggplot()+
geom_sf(terrs_union, mapping= aes(), colour='blue') +
geom_sf(MMRN_BeavNetOtter, mapping= aes(), colour='pink')+
theme_bw()
ggplot()+
geom_sf(MMRN_BeavNetOtter, mapping= aes(), colour='red')+
geom_sf(terrs_union, mapping= aes(), colour='blue') +
theme_bw()
nrow(RivOtter_Terrs)
lower_BFI
upper_BFI
raster::polygonise
?polgonise
sum(MMRN_BeavNetOtter$Length_m)
sum(MMRN_BeavNetOtter$Length_m)/1000
sum(MMRN_BeavNetOtter$Length)/1000
sum(st_length(MMRN_BeavNetOtter$Length))/1000
sum(st_length(MMRN_BeavNetOtter))/1000
