# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
terr_panel <- Otter_fs_list %>%
purrr::imap(.x=., ~fs_ggplot(.x, .y))%>%
panel_plot(.)
feed_panel <- Otter_fs_list %>%
purrr::imap(.x=., ~fs_ggplot(.x, .y))%>%
panel_plot(.)
ggsave('run/paper_plots/maps/OtterFeedSigns.png',plot = feed_panel, dpi=300)
ggsave('run/paper_plots/maps/OtterFeedSigns.png',plot = feed_panel, dpi=600)
class(RivOtter_Catch_Area)
as_Spatial(RivOtter_Catch_Area)
RivOtter_Catch_Area
st_as_sf(as_Spatial(RivOtter_Catch_Area))
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = F, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames)
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(.)
p <- RivOtter_FeedSigns %>%
dplyr::filter(SurveySeason == "2015 - 2016") %>%
plot_feeding(., basemap=F, catchment = RivOtter_Catch_Area,
rivers = F, plot_extent = target_ext, guide=F)
p + guides(colour=TRUE)
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = F, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames)
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(.)
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(.)
ggpubr::get_legend(terr_plot_list) %>%
as_ggplot()
ggpubr::get_legend(terr_plot_list) %>%
ggpubr::as_ggplot()
#remove all legends from plots
terr_plot_list %>%
purrr::map(., .f = function(x) x + ggplot2::guides(fill=F, colour=F, size=F))
if (isTRUE(scalebar)){
terr_plot_list[[n]] <- terr_plot_list[[n]] +
ggspatial::annotation_scale(location= scalebar_loc)
}
if (isTRUE(north_arrow)){
terr_plot_list[[n]] <- terr_plot_list[[n]] +
ggspatial::annotation_north_arrow(location = north_arrow_loc, which_north = "true",
height = ggplot2::unit(north_arrow_size, "cm"),
width = ggplot2::unit(north_arrow_size, "cm"),
style = ggspatial::north_arrow_orienteering(text_col=NA,
fill = c("black", "black")))
}
nCol <- ceiling(sqrt(n))
p1 <- do.call(gridExtra::grid.arrange, c(terr_plot_list, ncol=nCol))
p1
#remove all legends from plots
terr_plot_list <- terr_plot_list %>%
purrr::map(., .f = function(x) x + ggplot2::guides(fill=F, colour=F, size=F))
if (isTRUE(scalebar)){
terr_plot_list[[n]] <- terr_plot_list[[n]] +
ggspatial::annotation_scale(location= scalebar_loc)
}
if (isTRUE(north_arrow)){
terr_plot_list[[n]] <- terr_plot_list[[n]] +
ggspatial::annotation_north_arrow(location = north_arrow_loc, which_north = "true",
height = ggplot2::unit(north_arrow_size, "cm"),
width = ggplot2::unit(north_arrow_size, "cm"),
style = ggspatial::north_arrow_orienteering(text_col=NA,
fill = c("black", "black")))
}
nCol <- ceiling(sqrt(n))
p1 <- do.call(gridExtra::grid.arrange, c(terr_plot_list, ncol=nCol))
?gridExtra::grid.arrange
gridExtra::grid.arrange(list(p1, leg))
#extract legend
leg <- ggpubr::get_legend(terr_plot_list) %>%
ggpubr::as_ggplot()
gridExtra::grid.arrange(list(p1, leg))
gridExtra::grid.arrange(c(p1, leg))
class(leg)
gridExtra::grid.arrange(c(p1, leg), ncol=1)
class(terr_plot_list)
class(p1)
nCol
do.call(gridExtra::grid.arrange, c(terr_plot_list, ncol=nCol, bottom=leg))
#extract legend
leg <- ggpubr::get_legend(terr_plot_list)
class(leg)
leg
#extract legend
leg <- ggpubr::get_legend(terr_plot_list) %>%
ggpubr::as_ggplot() %>%
gridExtra::tableGrob()
#extract legend
leg <- ggpubr::get_legend(terr_plot_list) %>%
ggpubr::as_ggplot() %>%
grid::rasterGrob()
#extract legend
leg <- ggpubr::get_legend(terr_plot_list) %>%
ggpubr::as_ggplot() %>%
cowplot::as_grob()
leg
do.call(gridExtra::grid.arrange, c(terr_plot_list, ncol=nCol, bottom=leg))
gridExtra::grid.arrange(terr_plot_list, ncol=nCol, bottom=leg)
gridExtra::grid.arrange(terr_plot_list, ncol=nCol)
p1 <- do.call(gridExtra::grid.arrange, c(terr_plot_list, ncol=nCol, bottom=leg))
p1 <- do.call(gridExtra::grid.arrange, c(terr_plot_list, ncol=nCol))
#extract legend
leg <- ggpubr::get_legend(terr_plot_list) %>%
ggpubr::as_ggplot()
do.call(gridExtra::grid.arrange(list(p1,leg), ncol=nCol))
do.call(gridExtra::grid.arrange, c(list(p1,leg), ncol=nCol))
do.call(gridExtra::grid.arrange, c(list(p1,leg), ncol=1))
leg
leg
#extract legend
leg <- ggpubr::get_legend(terr_plot_list) %>%
ggpubr::as_ggplot()
leg
devtools::load_all()
devtools::load_all()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(.)
p1 <- do.call(gridExtra::grid.arrange, c(terr_plot_list, ncol=nCol))
terr_plot_listNL
p1 <- do.call(gridExtra::grid.arrange, c(terr_plot_listNL, ncol=nCol))
do.call(gridExtra::grid.arrange, c(list(p1,leg), ncol=1))
g <- grid::set_panel_heights(p2, list(unit(4,"null"),unit(1,"null")))
g <- gridExtra::set_panel_heights(p2, list(unit(4,"null"),unit(1,"null")))
p2 <- do.call(gridExtra::grid.arrange, c(list(p1,leg), ncol=1, heights=c(4,1)))
p2 <- do.call(gridExtra::grid.arrange, c(list(p1,leg), ncol=1, heights=c(4,1)))
p2 <- do.call(gridExtra::grid.arrange, c(list(p1,leg), nrow=2, heights=c(4,1)))
p2 <- do.call(gridExtra::grid.arrange, c(list(p1,leg), nrow=2, heights=list(4,1)))
p2 <- do.call(gridExtra::grid.arrange, c(list(p1,leg), nrow=2, heights=4:1))
p2 <- do.call(gridExtra::grid.arrange, c(list(p1,leg), ncol=2, heights=1:2))
p2 <- do.call(gridExtra::grid.arrange, c(list(p1,leg), ncol=2))
p2 <- do.call(gridExtra::grid.arrange, c(list(p1,leg), ncol=1))
p2 <- do.call(gridExtra::grid.arrange, c(list(p1,leg), ncol=1, , heights=1:2))
p2 <- do.call(gridExtra::grid.arrange, c(list(p1,leg), ncol=1, heights=1:2))
gridExtra::grid.arrange(p1, leg, ncol=1, heights=4:1)
?gridExtra::grid.arrange
gridExtra::grid.arrange(p1, leg, ncol=1, heights=c(4,1))
gridExtra::grid.arrange(p1, leg, ncol=1, heights=c(5,1))
gridExtra::grid.arrange(p1, leg, ncol=1, heights=c(8,1))
#extract legend
leg <- ggpubr::get_legend(terr_plot_list, position = "bottom") %>%
ggpubr::as_ggplot()
gridExtra::grid.arrange(p1, leg, ncol=1, heights=c(8,1))
usethis::use_package(ggpubr)
usethis::use_package("ggpubr")
usethis::use_gpl3_license()
usethis::options(usethis.full_name = "Hugh Graham")
options(usethis.full_name = "Hugh Graham")
usethis::use_gpl3_license()
devtools::document()
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = F, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames)
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
ggsave('run/paper_plots/maps/OtterFeedSigns.png',plot = feed_panel, dpi=600)
ggsave('run/paper_plots/maps/OtterFeedSigns.png',plot = feed_panel, dpi=600, height=15, width=10)
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
ggsave('run/paper_plots/maps/OtterFeedSigns.png',plot = feed_panel, dpi=600, height=8, width=6)
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(1,2,3), basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = F, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames)
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
ggsave('run/paper_plots/maps/OtterFeedSigns.png',plot = feed_panel, dpi=600, height=8, width=6)
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.5,1.5,3), basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = F, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames)
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
ggsave('run/paper_plots/maps/OtterFeedSigns.png',plot = feed_panel, dpi=600, height=8, width=6)
devtools::load_all()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
devtools::load_all()
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.5,1.5,3), basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = F, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames)
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
ggsave('run/paper_plots/maps/OtterFeedSigns.png',plot = feed_panel, dpi=600, height=8, width=6)
devtools::load_all()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
ggsave('run/paper_plots/maps/OtterFeedSigns2.png',plot = feed_panel, dpi=600, height=8, width=6)
devtools::load_all()
devtools::document()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, guide_fig_height=c(15,1))
ggsave('run/paper_plots/maps/OtterFeedSigns2.png',plot = feed_panel, dpi=600, height=8, width=6)
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, guide_fig_height=c(20,1))
ggsave('run/paper_plots/maps/OtterFeedSigns3.png',plot = feed_panel, dpi=600, height=8, width=6)
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, guide_fig_height=c(30,1))
ggsave('run/paper_plots/maps/OtterFeedSigns3.png',plot = feed_panel, dpi=600, height=8, width=6)
devtools::document()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE))
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
ggsave('run/paper_plots/maps/OtterFeedSigns3.png',plot = feed_panel, dpi=600, height=6, width=8)
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.5,1.5,3), basemap = T, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = T, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames)
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
ggsave('run/paper_plots/maps/OtterFeedSigns.png',plot = feed_panel, dpi=600, height=6, width=8)
ggsave('run/paper_plots/maps/OtterFeedSigns2.png',plot = feed_panel, dpi=600, height=6, width=7)
ggsave('run/paper_plots/maps/OtterFeedSigns2.png',plot = feed_panel, dpi=600, height=6, width=5)
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.5,1.5,3), basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = T, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames)
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
ggsave('run/paper_plots/maps/OtterFeedSignsNBM.png',plot = feed_panel, dpi=600, height=6, width=5)
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.5,1.5,3), basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = T, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE)
ggsave('run/paper_plots/maps/OtterFeedSignsNBM.png',plot = feed_panel, dpi=600, height=6, width=5)
# ------------ imports --------------------
devtools::install()
# ------------ imports --------------------
devtools::install()
devtools::load_all()
# devtools::document()
library(tidyverse)
library(sf)
BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg')
BeavNetOtter <- BeavNetOtter[BeavNetOtter$Str_order > 3,]
# ---------- run terriroty generation for all reaches
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
# sf::st_write(sf::st_buffer(test_out, 10), 'QGIS/To_test/All_terr_3.gpkg', driver=, "GPKG", append=FALSE, overwrite=T)
# ------------- Run territory cap -------------
t1 <- Sys.time()
test_TC_par <-territory_cap(test_out, min_veg = 2.5 , multicore = TRUE)
Sys.time()-t1
plot_capacity(test_TC_par)
?plot_capacity
plot_capacity(test_TC_par, basemap = F, catchment = RivOtter_Catch_Area, river_net = BeavNetOtter)
plot_capacity(test_TC_par, buffer=100, basemap = F, catchment = RivOtter_Catch_Area, river_net = BeavNetOtter)
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
plot_capacity(test_TC_par, buffer=100, basemap = F, catchment = RivOtter_Catch_Area, river_net = BeavNetOtter, plot_extent = target_ext)
plot_capacity(test_TC_par, buffer=50, basemap = F, catchment = RivOtter_Catch_Area, river_net = BeavNetOtter, plot_extent = target_ext)
BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg')
BeavNetOtter
ggplot(BeavNetOtter, aes(colour=Drain_Area))+
geom_sf()
# --------
BeavNetOtter %>%
filter(Drain_Area > 50) %>%
ggplot(., aes(colour=Drain_Area))+
geom_sf()
# --------
BeavNetOtter %>%
filter(Drain_Area > 10) %>%
ggplot(., aes(colour=Drain_Area))+
geom_sf()
# --------
BeavNetOtter %>%
filter(Drain_Area > 1) %>%
ggplot(., aes(colour=Drain_Area))+
geom_sf()
# --------
BeavNetOtter %>%
filter(Drain_Area > 0.5) %>%
ggplot(., aes(colour=Drain_Area))+
geom_sf()
library(patchwork)
# --------
p1 <- BeavNetOtter %>%
filter(Drain_Area > 0.5) %>%
ggplot(., aes(colour=Drain_Area))+
geom_sf()
p2 <- BeavNetOtter %>%
filter(Str_order > 1) %>%
ggplot(., aes(colour=Drain_Area))+
geom_sf()
p1 + p2
# --------
p1 <- BeavNetOtter %>%
filter(Drain_Area > 0.5) %>%
ggplot(., aes(colour=Drain_Area))+
geom_sf(guide=FALSE)
p1 <- BeavNetOtter %>%
filter(Drain_Area > 0.5) %>%
ggplot(.)+
geom_sf()
p2 <- BeavNetOtter %>%
filter(Str_order > 1) %>%
ggplot(.)+
geom_sf()
p3 <- BeavNetOtter %>%
ggplot(.)+
geom_sf()
p1 + p2 + p3
p1 <- BeavNetOtter %>%
filter(Drain_Area > 1) %>%
ggplot(.)+
geom_sf()
p2 <- BeavNetOtter %>%
filter(Str_order > 1) %>%
ggplot(.)+
geom_sf()
p3 <- BeavNetOtter %>%
ggplot(.)+
geom_sf()
p1 + p2 + p3
p1 <- BeavNetOtter %>%
filter(Drain_Area > 0.5) %>%
ggplot(.)+
geom_sf()
p2 <- BeavNetOtter %>%
filter(Str_order > 1) %>%
ggplot(.)+
geom_sf()
p3 <- BeavNetOtter %>%
ggplot(.)+
geom_sf()
p1 + p2 + p3
p1 <- BeavNetOtter %>%
filter(Drain_Area > 0.5) %>%
ggplot(., aes(colour=Str_order))+
geom_sf()+
guides(colour=F)
p2 <- BeavNetOtter %>%
filter(Str_order > 1) %>%
ggplot(., aes(colour=Str_order))+
geom_sf() +
guides(colour=F)
p3 <- BeavNetOtter %>%
ggplot(., aes(colour=Str_order))+
geom_sf()
p1 + p2 + p3
BeavNetOtter %>%
filter(Drain_Area > 0.5) %>%
ggplot(., aes(colour=Str_order))+
geom_sf()+
scale_colour_brewer()
BeavNetOtter %>%
filter(Drain_Area > 0.5) %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer()
?scale_colour_brewer
BeavNetOtter %>%
filter(Drain_Area > 0.5) %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2')
BeavNetOtter %>%
filter(Drain_Area > 0.25) %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2')
p1 <- BeavNetOtter %>%
filter(Drain_Area > 0.25) %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2') +
guides(colour=F)
p2 <- BeavNetOtter %>%
filter(Str_order > 1) %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2') +
guides(colour=F)
p3 <- BeavNetOtter %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2')
p1 + p2 + p3
p1 <- BeavNetOtter %>%
filter(Drain_Area > 0.25) %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2') +
guides(colour=F)
p2 <- BeavNetOtter %>%
filter(Drain_Area > 0.1) %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2') +
guides(colour=F)
p3 <- BeavNetOtter %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2')
p1 + p2 + p3
p1 <- BeavNetOtter %>%
filter(Drain_Area > 1) %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2') +
guides(colour=F)
p2 <- BeavNetOtter %>%
filter(Drain_Area > 0.5) %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2') +
guides(colour=F)
p3 <- BeavNetOtter %>%
ggplot(., aes(colour=as.factor(Str_order)))+
geom_sf()+
scale_colour_brewer(palette = 'Dark2')
p1 + p2 + p3
BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg')
BeavNetOtter <- BeavNetOtter%>%
filter(Drain_Area > 1)
# ---------- run terriroty generation for all reaches
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
# sf::st_write(sf::st_buffer(test_out, 10), 'QGIS/To_test/All_terr_3.gpkg', driver=, "GPKG", append=FALSE, overwrite=T)
# ------------- Run territory cap -------------
t1 <- Sys.time()
test_TC_par <-territory_cap(test_out, min_veg = 2.5 , multicore = TRUE)
Sys.time()-t1
plot_capacity(test_TC_par, buffer=50, basemap = F, catchment = RivOtter_Catch_Area, river_net = BeavNetOtter, plot_extent = target_ext)
devtools::load_all()
plot_capacity(test_TC_par, buffer=50, basemap = F, catchment = RivOtter_Catch_Area, river_net = BeavNetOtter, plot_extent = target_ext)
test_TC_par
sf::st_write(sf::st_buffer(test_TC_par, 50), 'QGIS/To_test/terr_sim_1kmCont.gpkg', driver=, "GPKG", append=FALSE, overwrite=T)
