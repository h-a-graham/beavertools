}
t2 <- Sys.time()
test_out2 <- best_territories(test_out, test_out)
Sys.time()-t2
test_out2
sf::st_write(sf::st_buffer(test_out2, 25), 'QGIS/To_test/terr_v6.gpkg', driver=, "GPKG", append=FALSE, overwrite=T)
get_highest <- function(reach, network, progbar){
progbar$tick()
network %>%
dplyr::filter(lengths(sf::st_intersects(., reach))>0) %>%
dplyr::arrange(., desc(Str_Ord), desc(BFI_40m)) %>%
dplyr::slice(1L)
}
terr_sort <- function(Terrs, progbar){
Terrs %>%
dplyr::arrange(., desc(Str_Ord), desc(BFI_40m)) %>%
tibble::rowid_to_column(., var='id') %>%
dplyr::group_by(id) %>%
dplyr::group_split() %>%
purrr:: map(., ~ get_highest(., Terrs, progbar)) %>%
dplyr::bind_rows() %>%
unique.data.frame()
}
select_terr <- function(all_terrs, n_terr=NULL, pass = 1){
if (is.null(n_terr)){
n_terr = nrow(all_terrs)
}
message(sprintf('Small Pass: %s', pass))
pb <- progress::progress_bar$new(total = nrow(all_terrs), clear = FALSE)
terr_pass <- all_terrs %>%
terr_sort(., progbar=pb)
if (n_terr == nrow(terr_pass)) {
return(terr_pass)
} else {
select_terr (terr_pass, n_terr = nrow(terr_pass), pass = pass + 1)
}
}
get_highest <- function(reach, network, progbar){
progbar$tick()
network %>%
dplyr::filter(lengths(sf::st_intersects(., reach))>0) %>%
dplyr::arrange(., desc(Str_Ord), desc(BFI_40m)) %>%
dplyr::slice(1L)
}
terr_sort <- function(Terrs, progbar){
Terrs %>%
# dplyr::arrange(., desc(Str_Ord), desc(BFI_40m)) %>%
tibble::rowid_to_column(., var='id') %>%
dplyr::group_by(id) %>%
dplyr::group_split() %>%
purrr:: map(., ~ get_highest(., Terrs, progbar)) %>%
dplyr::bind_rows() %>%
unique.data.frame()
}
select_terr <- function(all_terrs, n_terr=NULL, pass = 1){
if (is.null(n_terr)){
n_terr = nrow(all_terrs)
}
message(sprintf('Small Pass: %s', pass))
pb <- progress::progress_bar$new(total = nrow(all_terrs), clear = FALSE)
terr_pass <- all_terrs %>%
terr_sort(., progbar=pb)
if (n_terr == nrow(terr_pass)) {
return(terr_pass)
} else {
select_terr (terr_pass, n_terr = nrow(terr_pass), pass = pass + 1)
}
}
best_territories <- function(territories, terr_original, keep_terr=NULL, pass = 1) {
message(sprintf('Big Pass: %s', pass))
terr_step <- select_terr(territories)
if (is.null(keep_terr)) {
keep_terr <- terr_step
} else {
keep_terr <- keep_terr %>%
dplyr::bind_rows(terr_step)
}
avail_terr <- terr_original %>%
dplyr::filter(!lengths(sf::st_intersects(., keep_terr))>0)
if (nrow(avail_terr) == 0) {
return(keep_terr)
} else {
best_territories(avail_terr, terr_original, keep_terr, pass = pass + 1)
}
}
t2 <- Sys.time()
test_out2 <- best_territories(test_out, test_out)
Sys.time()-t2
sf::st_write(sf::st_buffer(test_out2, 25), 'QGIS/To_test/terr_v7.gpkg', driver=, "GPKG", append=FALSE, overwrite=T)
nrow(test_out2)
BeavNetOtter
BeavNetOtter
devtools::load_all()
test_out
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
test_out
sf::st_write(sf::st_buffer(test_out, 25), 'QGIS/To_test/All_terr_v1.gpkg', driver=, "GPKG", append=FALSE, overwrite=T)
rnorm(100, 2, 5)
?rnorm
rnorm(5, 1630, 293)
1
rnorm(1, 1630, 293)
rnorm(1, 1630, 500)
rnorm(100, 1630, 500)
rnorm(100, 1630, 293)
rnorm(1)
rnorm(1)
10
1524
1524
/2
r <- 1524/2
r
1630 -293
1337-762
1337*0.6
1337*0.4
1337*0.2
1337*(1-0.2)
1337*(1-0.6)
1337*(1-0.4)
3260.50/2
3260.50/2 + 293
(3260.50/2 + 293) *(1 + 0.4)
(3260.50/2  293) *(1 - 0.4)
(3260.50/2 - 293) *(1 - 0.4)
(3260.50/2 - 293) *(1 - 0.5)
(3260.50/2 - 293) *(1 + 0.5)
test_out
min(test_out$BFI_40m)
BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg')
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
# BeavNetOtter <- BeavNetOtter %>%
#   filter(Str_order > 2)
BeavNetOtter <- BeavNetOtter %>%
filter(Str_order > 2)
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
test_out
get_highest <- function(reach, network, progbar){
progbar$tick()
network %>%
dplyr::filter(lengths(sf::st_intersects(., reach))>0) %>%
dplyr::arrange(., desc(Str_Ord), desc(BFI_40m)) %>%
dplyr::slice(1L)
}
terr_sort <- function(Terrs, progbar){
Terrs %>%
# dplyr::arrange(., desc(Str_Ord), desc(BFI_40m)) %>%
tibble::rowid_to_column(., var='id') %>%
dplyr::group_by(id) %>%
dplyr::group_split() %>%
purrr:: map(., ~ get_highest(., Terrs, progbar)) %>%
dplyr::bind_rows() %>%
unique.data.frame()
}
select_terr <- function(all_terrs, n_terr=NULL, pass = 1){
if (is.null(n_terr)){
n_terr = nrow(all_terrs)
}
message(sprintf('Small Pass: %s', pass))
pb <- progress::progress_bar$new(total = nrow(all_terrs), clear = FALSE)
terr_pass <- all_terrs %>%
terr_sort(., progbar=pb)
if (n_terr == nrow(terr_pass)) {
return(terr_pass)
} else {
select_terr (terr_pass, n_terr = nrow(terr_pass), pass = pass + 1)
}
}
best_territories <- function(territories, terr_original, keep_terr=NULL, pass = 1) {
message(sprintf('Big Pass: %s', pass))
terr_step <- select_terr(territories)
if (is.null(keep_terr)) {
keep_terr <- terr_step
} else {
keep_terr <- keep_terr %>%
dplyr::bind_rows(terr_step)
}
avail_terr <- terr_original %>%
dplyr::filter(!lengths(sf::st_intersects(., keep_terr))>0)
if (nrow(avail_terr) == 0) {
return(keep_terr)
} else {
best_territories(avail_terr, terr_original, keep_terr, pass = pass + 1)
}
}
t2 <- Sys.time()
test_out2 <- best_territories(test_out, test_out)
Sys.time()-t2
sf::st_write(sf::st_buffer(test_out2, 25), 'QGIS/To_test/terr_v8.gpkg', driver=, "GPKG", append=FALSE, overwrite=T)
test_out2
library(ggplot2)
ggplot(test_out2, aes(x=Terr_Leng))%>%
geom_histogram()
ggplot(test_out2, aes(x=Terr_Leng))+
geom_histogram()
ggplot(test_out2, aes(x=Terr_Leng))+
geom_density()
ggplot(test_out2, aes(x=Terr_Leng))+
geom_histogram(binwidth = 100)
ggplot(test_out2, aes(x=BFI_40m))+
geom_histogram(binwidth = 100)
ggplot(test_out2, aes(x=BFI_40m))+
geom_histogram()
ggplot(test_out2[test_out2<5,], aes(x=BFI_40m))+
geom_histogram()
ggplot(test_out2[test_out2<5], aes(x=BFI_40m))+
geom_histogram()
ggplot(test_out2[test_out2$Str_Ord<5], aes(x=BDC))+
geom_histogram()
ggplot(test_out2[test_out2$Str_Ord<5,], aes(x=BDC))+
geom_histogram()
test_out2[test_out2$Str_Ord<5,]
min(test_out2$BDC[test_out2$Str_Ord<5,])
min(test_out2$BDC[test_out2$Str_Ord<5])
getOption("warn")
10/1.5
getOption("warn")
library(tidyverse)
library(sf)
devtools::load_all()
# ------------ Read Data ------------------
# This is the high res version of the Beaver Network and cannot be released with the package due to
# licensing issues. When we produce the OPen BeaverNetwork the network for the R. Otter will be included as
# a built in dataset.
BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg')
# check data
ggplot(BeavNetOtter, aes(colour = V_BDC)) +
geom_sf()+
theme_bw()
# ---------- Subset dataset for now - > 2nd order streams only -----------
BeavNetOtter <- BeavNetOtter %>%
filter(Str_order > 2)
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
getOption("warn")
options(warn = 0)
warning('hey')
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
test_out
BeavNetOtter
options(warn = 0)
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
# An approach to esimte carrying capacity.
# ------------ imports --------------------
library(tidyverse)
library(sf)
devtools::load_all()
# ------------ Read Data ------------------
# This is the high res version of the Beaver Network and cannot be released with the package due to
# licensing issues. When we produce the OPen BeaverNetwork the network for the R. Otter will be included as
# a built in dataset.
BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg')
# check data
ggplot(BeavNetOtter, aes(colour = V_BDC)) +
geom_sf()+
theme_bw()
# ---------- Subset dataset for now - > 2nd order streams only -----------
BeavNetOtter <- BeavNetOtter %>%
filter(Str_order > 2)
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
test_out
BeavNetOtter
# ----- functions for simulated territories --------------
get_highest <- function(reach, network, progbar){
progbar$tick()
network %>%
dplyr::filter(lengths(sf::st_intersects(., reach))>0) %>%
dplyr::arrange(., desc(Str_Ord), desc(BFI_40m)) %>%
dplyr::slice(1L)
}
terr_sort <- function(Terrs, progbar){
Terrs %>%
# dplyr::arrange(., desc(Str_Ord), desc(BFI_40m)) %>%
tibble::rowid_to_column(., var='id') %>%
dplyr::group_by(id) %>%
dplyr::group_split() %>%
purrr:: map(., ~ get_highest(., Terrs, progbar)) %>%
dplyr::bind_rows() %>%
unique.data.frame()
}
select_terr <- function(all_terrs, n_terr=NULL, pass = 1){
if (is.null(n_terr)){
n_terr = nrow(all_terrs)
}
message(sprintf('Small Pass: %s', pass))
pb <- progress::progress_bar$new(total = nrow(all_terrs), clear = FALSE)
terr_pass <- all_terrs %>%
terr_sort(., progbar=pb)
if (n_terr == nrow(terr_pass)) {
return(terr_pass)
} else {
select_terr (terr_pass, n_terr = nrow(terr_pass), pass = pass + 1)
}
}
best_territories <- function(territories, terr_original=NULL, keep_terr=NULL, pass = 1) {
if (is.null(terr_original)){
terr_original <- territories
}
message(sprintf('Big Pass: %s', pass))
terr_step <- select_terr(territories)
if (is.null(keep_terr)) {
keep_terr <- terr_step
} else {
keep_terr <- keep_terr %>%
dplyr::bind_rows(terr_step)
}
avail_terr <- terr_original %>%
dplyr::filter(!lengths(sf::st_intersects(., keep_terr))>0)
if (nrow(avail_terr) == 0) {
return(keep_terr)
} else {
best_territories(avail_terr, terr_original, keep_terr, pass = pass + 1)
}
}
sim_territories <- function(territories, min_veg = 2.5, min_bdc = 1){
terrs <- territories %>%
dplyr::filter(BFI_40m >= min_veg) %>%
dplyr::mutate(discard = ifelse(Str_Ord < 5 & BDC <= min_bdc, 'True', 'False')) %>%
dplyr::filter(discard == 'False') %>%
dplyr::select(!discard)
rem_terr_n <- nrow(territories) - nrow(terrs)
if (rem_terr_n > 0) {
warning(sprintf('min_veg and min_bdc args have resulted in the removal of %s territories',
rem_terr_n))
}
final_terrs <- best_territories(terrs)
return(final_terrs)
}
t2 <- Sys.time()
test_out2 <- sim_territories(test_out)
Sys.time()-t2
test_out2
sf::st_write(sf::st_buffer(test_out2, 25), 'QGIS/To_test/terr_v9.gpkg', driver=, "GPKG", append=FALSE, overwrite=T)
set.seed(123)
rnorm(1, 1630, 293)
rnorm(1, 1630, 293)
set.seed(123)
rnorm(1, 1630, 293)
rm(.Random.seed, envir=globalenv())
rnorm(1, 1630, 293)
BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg')
# check data
ggplot(BeavNetOtter, aes(colour = V_BDC)) +
geom_sf()+
theme_bw()
# ---------- Subset dataset for now - > 2nd order streams only -----------
# BeavNetOtter <- BeavNetOtter %>%
#   filter(Str_order > 2)
# -----------
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
# ----- functions for simulated territories --------------
get_highest <- function(reach, network, progbar){
progbar$tick()
network %>%
dplyr::filter(lengths(sf::st_intersects(., reach))>0) %>%
dplyr::arrange(., desc(Str_Ord), desc(BFI_40m)) %>%
dplyr::slice(1L)
}
terr_sort <- function(Terrs, progbar){
Terrs %>%
# dplyr::arrange(., desc(Str_Ord), desc(BFI_40m)) %>%
tibble::rowid_to_column(., var='id') %>%
dplyr::group_by(id) %>%
dplyr::group_split() %>%
purrr:: map(., ~ get_highest(., Terrs, progbar)) %>%
dplyr::bind_rows() %>%
unique.data.frame()
}
select_terr <- function(all_terrs, n_terr=NULL, pass = 1){
if (is.null(n_terr)){
n_terr = nrow(all_terrs)
}
message(sprintf('Small Pass: %s', pass))
pb <- progress::progress_bar$new(total = nrow(all_terrs), clear = FALSE)
terr_pass <- all_terrs %>%
terr_sort(., progbar=pb)
if (n_terr == nrow(terr_pass)) {
return(terr_pass)
} else {
select_terr (terr_pass, n_terr = nrow(terr_pass), pass = pass + 1)
}
}
best_territories <- function(territories, terr_original=NULL, keep_terr=NULL, pass = 1) {
if (is.null(terr_original)){
terr_original <- territories
}
message(sprintf('Big Pass: %s', pass))
terr_step <- select_terr(territories)
if (is.null(keep_terr)) {
keep_terr <- terr_step
} else {
keep_terr <- keep_terr %>%
dplyr::bind_rows(terr_step)
}
avail_terr <- terr_original %>%
dplyr::filter(!lengths(sf::st_intersects(., keep_terr))>0)
if (nrow(avail_terr) == 0) {
return(keep_terr)
} else {
best_territories(avail_terr, terr_original, keep_terr, pass = pass + 1)
}
}
sim_territories <- function(territories, min_veg = 2.5, min_bdc = 1){
terrs <- territories %>%
dplyr::filter(BFI_40m >= min_veg) %>%
dplyr::mutate(discard = ifelse(Str_Ord < 5 & BDC <= min_bdc, 'True', 'False')) %>%
dplyr::filter(discard == 'False') %>%
dplyr::select(!discard)
rem_terr_n <- nrow(territories) - nrow(terrs)
if (rem_terr_n > 0) {
warning(sprintf('min_veg and min_bdc args have resulted in the removal of %s territories',
rem_terr_n))
}
final_terrs <- best_territories(terrs)
return(final_terrs)
}
test_out
t2 <- Sys.time()
test_out2 <- sim_territories(test_out)
Sys.time()-t2
test_out2
sf::st_write(sf::st_buffer(test_out2, 25), 'QGIS/To_test/terr_v10.gpkg', driver=, "GPKG", append=FALSE, overwrite=T)
BeavNetOtter <- BeavNetOtter %>%
filter(Str_order > 2)
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
?detectCores
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
?makeCluster
?registerDoParallel
?stopCluster
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
?%dopar%
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
foreach::%dopar%
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
devtools::document()
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
devtools::load_all()
devtools::document()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
?foreach::`%dopar%`
devtools::document()
devtools::document()
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
devtools::document()
?@rdname
devtools::document()
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
rep(BeavNetOtter, 2)
list(BeavNetOtter)
rep(list(BeavNetOtter), 2)
devtools::load_all()
t1 <- Sys.time()
test_out <-  gen_territories(BeavNetOtter)
Sys.time()-t1
devtools::load_all()
parallel::stopCluster(cl)
