fs <- plot_other_signs(.data, size = 1.5, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=leg, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_conf_list <- RivOtter_OtherSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
other_panel <- Otter_conf_list %>%
purrr::map2(.x=., .y= plot_names,  ~conf_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4)
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedSigns.png',plot = feed_panel,
dpi=600, height=155, width=180, units='mm')
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = other_panel,
dpi=600, height=155, width=180, units='mm')
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = other_panel,
dpi=600, height=155, width=180, units='mm')
# -------------- Feeding Density Maps ---------------
round_sci <- function(x) as.numeric(formatC(x, format = "e", digits = 1))
fsd_ggplot <- function(.data, p.names){
plot_forage_density(.data, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE, guide = TRUE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, attribute=FALSE,
guide_width=0.25)+
labs(subtitle = p.names) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_blank()) +
guides(fill = guide_colourbar(title.vjust = 0.5))
}
kde_ras_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()%>%
purrr::map(., ~forage_density(., 'FeedCat', kd_extent = target_ext, grid_size=20, kern_bw = 200, low_thresh = 1e-10))
kde_panel <- kde_ras_list%>%
purrr::map2(.x=., .y=plot_names, ~fsd_ggplot(.x, .y)) %>%
panel_plot(., guide=TRUE, n_col = 4)
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedDensityd.png',plot = kde_panel,
dpi=600, height=155, width=180, units='mm')
fsd_ggplot <- function(.data, p.names){
plot_forage_density(.data, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE, guide = TRUE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, attribute=FALSE)+
labs(subtitle = p.names) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_blank()) +
guides(fill = guide_colourbar(title.vjust = 0.5, barheight = 0.5))
}
kde_ras_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()%>%
purrr::map(., ~forage_density(., 'FeedCat', kd_extent = target_ext, grid_size=20, kern_bw = 200, low_thresh = 1e-10))
## ============== BEAVER FIELD SIGN AND TERRITORY VISUALISATION ============#
# Written by Hugh Graham, 2021.
# This script uses the {beavertools} package to visualise the change in beaver
# population within the River Otter (Devon)
#===========================================================================#
# Notes:
# set up license and add dependencies to description.
# generate publication plots for the feeding points, confirmatory signs,
# Feeding density, territories.
#===========================================================================#
# --------- Imports -----------------------
library(patchwork)
library(sf)
library(magrittr)
library(tidyverse)
library(patchwork)
library(ggfortify)
devtools::load_all()
# devtools::document()
#  -------------------- Data ------------------------
# RivOtter_Catch_Area # R Otter Catchment area - included with {beavertools}
# RivOtter_FeedSigns # R Otter Feeding Sign survey data
# RivOtter_OtherSigns # R Otter Survey data for Dwellings and Dams
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
plot_names <- unique(RivOtter_FeedSigns$SurveySeason)
# ------- get Open Street Map River network ---------
OSM_rivers <- get_rivers(RivOtter_Catch_Area)
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = F, axes_units = F, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T,
guide_pos='bottom', wgs = F) +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4)
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedSigns.png',plot = feed_panel,
dpi=600, height=155, width=180, units='mm')
# ------------- Confirmatory sign Maps --------------
conf_ggplot <- function(.data, pNames){
leg <- FALSE
if (pNames == '2019 - 2020'){
leg <- TRUE
}
fs <- plot_other_signs(.data, size = 1.5, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=leg, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_conf_list <- RivOtter_OtherSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
other_panel <- Otter_conf_list %>%
purrr::map2(.x=., .y= plot_names,  ~conf_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4)
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = other_panel,
dpi=600, height=155, width=180, units='mm')
# -------------- Feeding Density Maps ---------------
fsd_ggplot <- function(.data, p.names){
plot_forage_density(.data, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE, guide = TRUE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, attribute=FALSE)+
labs(subtitle = p.names) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_blank()) +
guides(fill = guide_colourbar(title.vjust = 0.5, barheight = 0.5))
}
kde_ras_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()%>%
purrr::map(., ~forage_density(., 'FeedCat', kd_extent = target_ext, grid_size=20, kern_bw = 200, low_thresh = 1e-10))
kde_panel <- kde_ras_list%>%
purrr::map2(.x=., .y=plot_names, ~fsd_ggplot(.x, .y)) %>%
panel_plot(., guide=TRUE, n_col = 4)
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedDensityd.png',plot = kde_panel,
dpi=600, height=155, width=180, units='mm')
## ============== BEAVER FIELD SIGN AND TERRITORY VISUALISATION ============#
# Written by Hugh Graham, 2021.
# This script uses the {beavertools} package to visualise the change in beaver
# population within the River Otter (Devon)
#===========================================================================#
# Notes:
# set up license and add dependencies to description.
# generate publication plots for the feeding points, confirmatory signs,
# Feeding density, territories.
#===========================================================================#
# --------- Imports -----------------------
library(patchwork)
library(sf)
library(magrittr)
library(tidyverse)
library(patchwork)
library(ggfortify)
devtools::load_all()
# devtools::document()
#  -------------------- Data ------------------------
# RivOtter_Catch_Area # R Otter Catchment area - included with {beavertools}
# RivOtter_FeedSigns # R Otter Feeding Sign survey data
# RivOtter_OtherSigns # R Otter Survey data for Dwellings and Dams
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
plot_names <- unique(RivOtter_FeedSigns$SurveySeason)
# ------- get Open Street Map River network ---------
OSM_rivers <- get_rivers(RivOtter_Catch_Area)
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = F, axes_units = F, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T,
guide_pos='bottom', wgs = F) +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4)
# ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedSigns.png',plot = feed_panel,
# dpi=600, height=155, width=180, units='mm')
# ------------- Confirmatory sign Maps --------------
conf_ggplot <- function(.data, pNames){
leg <- FALSE
if (pNames == '2019 - 2020'){
leg <- TRUE
}
fs <- plot_other_signs(.data, size = 1.5, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=leg, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_conf_list <- RivOtter_OtherSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
other_panel <- Otter_conf_list %>%
purrr::map2(.x=., .y= plot_names,  ~conf_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4)
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = other_panel,
dpi=600, height=155, width=180, units='mm')
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedSigns.png',plot = feed_panel,
dpi=300, height=155, width=180, units='mm')
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedDensityd.png',plot = kde_panel,
dpi=300, height=155, width=180, units='mm')
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = other_panel,
dpi=300, height=155, width=180, units='mm')
?ggsave
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = other_panel,
dpi=300, height=155, width=180, units='mm', device=png())
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = other_panel,
dpi=300, height=155, width=180, units='mm', device="ps")
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = other_panel,
dpi=300, height=155, width=180, units='mm', device="eps")
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = other_panel,
dpi=300, height=155, width=180, units='mm', device="tex")
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = other_panel,
dpi=300, height=155, width=180, units='mm', device="jpeg")
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.tiff',plot = other_panel,
dpi=300, height=155, width=180, units='mm', device="tiff")
devtools::load_all()
library(sf)
st_area(RivOtter_Catch_Area)
st_area(RivOtter_Catch_Area)/1000
?st_area
units(st_area(RivOtter_Catch_Area), 'km')
?symbolic_units
set_units(st_area(RivOtter_Catch_Area), km^2)
units::set_units(st_area(RivOtter_Catch_Area), km^2)
library(beavertools)
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
#-------------define folder root -------------
export_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
plot_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/plots")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
# ------------ Read Data ------------------
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# MasterMap River Network not released with the package due to licensing issues.
MMRN_BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg')
#------- Observed territory Habitat stats ----------
# need to calculate some stats here and find out what kind of BFI values we're currently seeing on the Otter.
terr_list <- readRDS(file=file.path(here::here(),'R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds'))
survey_years <- unique(RivOtter_FeedSigns$SurveySeason)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
lower_BFI <- round(min(Terr_df$mean_BFI_40m),1)
upper_BFI <- round(mean(Terr_df$mean_BFI_40m), 1)
lower_BFI
upper_BFI
terr_list <- readRDS(file=file.path(here::here(),'R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list2.Rds'))
survey_years <- unique(RivOtter_FeedSigns$SurveySeason)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
lower_BFI <- round(min(Terr_df$mean_BFI_40m),1)
upper_BFI <- round(mean(Terr_df$mean_BFI_40m), 1)
lower_BFI
upper_BFI
terr_list
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
traceback()
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
obs_terr %>%
sf::st_intersection(network) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"),
sum_BFI = mean(BFI_40m),
dplyr::across(c("BFI_40m", "BDC"),
sum, .names = "sum_{.col}"),
dplyr::across(c("BFI_40m", "BDC"),
max, .names = "sum_{.col}")) %>%
sf::st_drop_geometry() %>%
bind_cols(obs_terr,.)
obs_terr %>%
sf::st_intersection(network) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"),
sum_BFI = mean(BFI_40m),
dplyr::across(c("BFI_40m", "BDC"),
sum, .names = "sum_{.col}"),
dplyr::across(c("BFI_40m", "BDC"),
max, .names = "sum_{.col}")) %>%
sf::st_drop_geometry() %>%
bind_cols(obs_terr,.)
obs_terr %>%
sf::st_intersection(network) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"),
sum_BFI = mean(BFI_40m),
dplyr::across(c("BFI_40m", "BDC"),
sum, .names = "sum_{.col}"),
dplyr::across(c("BFI_40m", "BDC"),
max, .names = "sum_{.col}")) %>%
sf::st_drop_geometry() %>%
bind_cols(obs_terr,.)
obs_terr %>%
sf::st_intersection(network) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"),
sum_BFI = mean(BFI_40m),
dplyr::across(c("BFI_40m", "BDC"),
sum, .names = "sum_{.col}"),
dplyr::across(c("BFI_40m", "BDC"),
max, .names = "sum_{.col}")) %>%
sf::st_drop_geometry() %>%
bind_cols(obs_terr,.)
obs_terr %>%
sf::st_intersection(network) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"),
sum_BFI = mean(BFI_40m),
dplyr::across(c("BFI_40m", "BDC"),
sum, .names = "sum_{.col}"),
dplyr::across(c("BFI_40m", "BDC"),
max, .names = "sum_{.col}")) %>%
sf::st_drop_geometry() %>%
bind_cols(obs_terr,.)
obs_terr %>%
sf::st_intersection(network) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"),
sum_BFI = mean(BFI_40m),
dplyr::across(c("BFI_40m", "BDC"),
sum, .names = "sum_{.col}"),
dplyr::across(c("BFI_40m", "BDC"),
max, .names = "sum_{.col}")) %>%
sf::st_drop_geometry() %>%
bind_cols(obs_terr,.)
obs_terr %>%
sf::st_intersection(network) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"),
sum_BFI = mean(BFI_40m),
dplyr::across(c("BFI_40m", "BDC"),
sum, .names = "sum_{.col}"),
dplyr::across(c("BFI_40m", "BDC"),
max, .names = "sum_{.col}")) %>%
sf::st_drop_geometry() %>%
bind_cols(obs_terr,.)
obs_terr %>%
sf::st_intersection(network) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"),
sum_BFI = mean(BFI_40m),
dplyr::across(c("BFI_40m", "BDC"),
sum, .names = "sum_{.col}"),
dplyr::across(c("BFI_40m", "BDC"),
max, .names = "sum_{.col}")) %>%
sf::st_drop_geometry() %>%
bind_cols(obs_terr,.)
obs_terr %>%
sf::st_intersection(network) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"),
sum_BFI = mean(BFI_40m),
dplyr::across(c("BFI_40m", "BDC"),
sum, .names = "sum_{.col}"),
dplyr::across(c("BFI_40m", "BDC"),
max, .names = "sum_{.col}")) %>%
sf::st_drop_geometry() %>%
bind_cols(obs_terr,.)
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
terr_list
survey_years
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
traceback()
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
?try
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
traceback()
try(log("a"))
lower_BFI <- round(min(Terr_df$mean_BFI_40m),1)
upper_BFI <- round(mean(Terr_df$mean_BFI_40m), 1)
lower_BFI
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
traceback()
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
library(beavertools)
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
export_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
plot_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/plots")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
# ------------ Read Data ------------------
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# MasterMap River Network not released with the package due to licensing issues.
MMRN_BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg') # MasterMap Data
# OS Open Rivers Network - included with the package
# ORN_BeavNetOtter <- RivOtter_BeaverNet
#------- Observed territory Habitat stats ----------
# need to calculate some stats here and find out what kind of BFI values we're currently seeing on the Otter.
terr_list <- readRDS(file=file.path(here::here(),'R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list2.Rds'))
survey_years <- unique(RivOtter_FeedSigns$SurveySeason)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
purrr::safely(hab_stats(obs_terr=obs_terr, network=network))
hab_stats(obs_terr=obs_terr, network=network)
obs_terr
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
obs_terr
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
obs_terr %>%
# sf::st_buffer(250) %>%
sf::st_intersection(network) %>%
dplyr::mutate(Leng = as.numeric(sf::st_length(.))) %>%
dplyr::summarise(dplyr::across(c("BFI_40m", "BDC", "Str_order"),
~ weighted.mean(.x, w= Leng, na.rm = TRUE), .names = "mean_{.col}"),
sum_BFI = mean(BFI_40m),
dplyr::across(c("BFI_40m", "BDC"),
sum, .names = "sum_{.col}"),
dplyr::across(c("BFI_40m", "BDC"),
max, .names = "sum_{.col}")) %>%
sf::st_drop_geometry() %>%
bind_cols(obs_terr,.)
terr_list
obs_terr
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
obs_terr
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
purrr::safely(hab_stats(obs_terr=obs_terr, network=network))
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
f()
f()$result
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
lower_BFI <- round(min(Terr_df$mean_BFI_40m),1)
upper_BFI <- round(mean(Terr_df$mean_BFI_40m), 1)
lower_BFI
upper_BFI
#------- Observed territory Habitat stats ----------
# need to calculate some stats here and find out what kind of BFI values we're currently seeing on the Otter.
terr_list <- readRDS(file=file.path(here::here(),'R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds'))
survey_years <- unique(RivOtter_FeedSigns$SurveySeason)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
lower_BFI <- round(min(Terr_df$mean_BFI_40m),1)
upper_BFI <- round(mean(Terr_df$mean_BFI_40m), 1)
lower_BFI
upper_BFI
# ------------ imports --------------------
# devtools::document()
# devtools::load_all()
# devtools::uninstall()
devtools::install()
install.packages('exactextractr')
install.packages("exactextractr")
# ------------ imports --------------------
# devtools::document()
# devtools::load_all()
# devtools::uninstall()
devtools::install()
