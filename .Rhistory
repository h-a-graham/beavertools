# scale_colour_viridis_c(option='turbo') +
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.vjust=1)) +
facet_grid(mgmt_removed ~ mgmt_year ) +
# define plot style n stuff
coord_cartesian(ylim=c(8,upper_capacity +5), xlim = c(2007, 2060))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0)))
}
mgmt_p <- mgmt_plot(mgmt_df)
mgmt_p
# create plot.
mgmt_plot <- function(df){
df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# shows range of unmanaged scenario
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
geom_ribbon(aes(ymin=mgmt_growth.lwr, ymax = mgmt_growth.upr,
group=reorder(cap_name, rev(cap_name))),
fill='#18BFC2', alpha=0.04) +
stat_summary(aes(y=mgmt_growth.lwr), fun = min, geom = 'line', size=0.3, alpha=0.9, linetype=1, color="grey10") +
stat_summary(aes(y=mgmt_growth.upr),fun = max, geom = 'line', size=0.3, alpha=0.9, linetype=1, color="grey10") +
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.9, linetype=2, color="grey10") +
stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.9, linetype=2, color="grey10") +
### This gives just the lines
# geom_line(aes(y=mgmt_growth, group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.5)+
# scale_colour_viridis_c(option='turbo') +
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.vjust=1)) +
facet_grid(mgmt_removed ~ mgmt_year ) +
# define plot style n stuff
coord_cartesian(ylim=c(8,upper_capacity +5), xlim = c(2015, 2060))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0)))
}
mgmt_p <- mgmt_plot(mgmt_df)
mgmt_p
# --------- Imports -----------------------
library(patchwork)
library(sf)
library(magrittr)
library(tidyverse)
library(patchwork)
library(ggfortify)
devtools::load_all()
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
plot_names <- unique(RivOtter_FeedSigns$SurveySeason)
# ------- get Open Street Map River network ---------
OSM_rivers <- get_rivers(RivOtter_Catch_Area)
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = F, axes_units = F, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T,
guide_pos='bottom', wgs = F) +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4) %>%
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedSigns.png',plot = .,
dpi=300, height=152, width=180, units='mm')
feed_panel
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4)
Otter_fs_list
RivOtter_FeedSigns
unique(RivOtter_FeedSigns$SurveySeason)
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
filter(SurveySeason!= "Pre 2015") %>%
group_by(SurveySeason) %>%
group_split()
Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4)
plot_names
RivOtter_FS <- RivOtter_FeedSigns %>%
filter(SurveySeason!= "Pre 2015")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
plot_names <- unique(RivOtter_FS$SurveySeason)
# Filter unreliable historic data
RivOtter_FS <- RivOtter_FeedSigns %>%
filter(SurveySeason!= "Pre 2015")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
plot_names <- unique(RivOtter_FS$SurveySeason)
# ------- get Open Street Map River network ---------
OSM_rivers <- get_rivers(RivOtter_Catch_Area)
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = F, axes_units = F, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T,
guide_pos='bottom', wgs = F) +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FS %>%
group_by(SurveySeason) %>%
group_split()
Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4)
Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 3)
devtools::load_all()
Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 3, mask_fill='grey80')
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = F, axes_units = F, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T,
guide_pos='bottom', wgs = F, mask_fill='grey80') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FS %>%
group_by(SurveySeason) %>%
group_split()
Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 3)
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = F, axes_units = F, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T,
guide_pos='bottom', wgs = F, mask_fill='grey10') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FS %>%
group_by(SurveySeason) %>%
group_split()
Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 3)
devtools::load_all()
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = F, axes_units = F, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T,
guide_pos='bottom', wgs = F, mask_fill='grey80') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FS %>%
group_by(SurveySeason) %>%
group_split()
Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 3)
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 3) %>%
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedSigns.png',plot = .,
dpi=300, height=152, width=180, units='mm')
# ------------- Confirmatory sign Maps --------------
conf_ggplot <- function(.data, pNames){
leg <- FALSE
if (pNames == '2019 - 2020'){
leg <- TRUE
}
fs <- plot_other_signs(.data, size = 1.5, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=leg, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_conf_list <- RivOtter_OtherSigns %>%
group_by(SurveySeason) %>%
group_split()
# ------------- Confirmatory sign Maps --------------
conf_ggplot <- function(.data, pNames){
leg <- FALSE
if (pNames == '2019 - 2020'){
leg <- TRUE
}
fs <- plot_other_signs(.data, size = 1.5, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=leg, guide_pos='bottom',
mask_fill='grey80') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_conf_list <- RivOtter_OtherSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
other_panel <- Otter_conf_list %>%
purrr::map2(.x=., .y= plot_names,  ~conf_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4) %>%
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = .,
dpi=300, height=152, width=180, units='mm')
Otter_conf_list
RivOtter_OtherSigns
RivOtter_OS <- RivOtter_OtherSigns %>%
filter(SurveySeason!= "Pre 2015")
# ------------- Confirmatory sign Maps --------------
conf_ggplot <- function(.data, pNames){
leg <- FALSE
if (pNames == '2019 - 2020'){
leg <- TRUE
}
fs <- plot_other_signs(.data, size = 1.5, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=leg, guide_pos='bottom',
mask_fill='grey80') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_conf_list <- RivOtter_OS %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
other_panel <- Otter_conf_list %>%
purrr::map2(.x=., .y= plot_names,  ~conf_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4) %>%
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = .,
dpi=300, height=152, width=180, units='mm')
# generate list of sf objects with estimated territory locations/status
other_panel <- Otter_conf_list %>%
purrr::map2(.x=., .y= plot_names,  ~conf_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 3) %>%
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = .,
dpi=300, height=152, width=180, units='mm')
fsd_ggplot <- function(.data, p.names){
plot_forage_density(.data, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE, guide = TRUE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, attribute=FALSE)+
labs(subtitle = p.names) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_blank()) +
guides(fill = guide_colourbar(title.vjust = 1, barheight = 0.5, title='Forage density (low-high)', ticks = FALSE))
}
kde_general_func <- function(kbw, lt){
RivOtter_FS %>%
group_by(SurveySeason) %>%
group_split()%>%
purrr::map(., ~forage_density(., 'FeedCat', kd_extent = target_ext, grid_size=20, kern_bw = kbw, low_thresh = lt))
}
kde_ras_list <- kde_general_func(200, 1e-10)
kde_ras_listVIS <- kde_general_func(250, 1e-12)
devtools::load_all()
fsd_ggplot <- function(.data, p.names){
plot_forage_density(.data, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE, guide = TRUE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, attribute=FALSE,
mask_fill = "grey80")+
labs(subtitle = p.names) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_blank()) +
guides(fill = guide_colourbar(title.vjust = 1, barheight = 0.5, title='Forage density (low-high)', ticks = FALSE))
}
kde_panel <- function(kde_list, filename){
kde_list%>%
purrr::map2(.x=., .y=plot_names, ~fsd_ggplot(.x, .y)) %>%
panel_plot(., guide=TRUE, n_col = 4) %>%
ggsave(filename=filename,plot = .,
dpi=300, height=152, width=180, units='mm')
}
kde_panel(kde_ras_list, 'R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedDensitySI.png') # for SI material - harder to read
kde_panel <- function(kde_list, filename){
kde_list%>%
purrr::map2(.x=., .y=plot_names, ~fsd_ggplot(.x, .y)) %>%
panel_plot(., guide=TRUE, n_col = 3) %>%
ggsave(filename=filename,plot = .,
dpi=300, height=152, width=180, units='mm')
}
kde_panel(kde_ras_list, 'R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedDensitySI.png') # for SI material - harder to read
kde_panel(kde_ras_listVIS, 'R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedDensity.png') # exaggerated version for main paper.
# ---------- Territory Classification Maps ----------
terr_ggplot <- function(.data, pNames, fill.name, .lab, buffer=NULL){
if (!is.null(buffer)){
.data<-sf::st_buffer(.data, 50)
}
terr <- plot_territories(.data, fill.name, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext,
guide_pos='bottom', label = .lab, mask_fill = 'grey80') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
guides(fill = guide_legend(title='Home range class'))
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_confirm_list <- RivOtter_OS %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
auto_terr_list <- kde_ras_list %>%
purrr::map2(.x = ., .y= Otter_confirm_list,
.f = ~ estimate_territories(.x, .y, upper_thresh =0.95))
# check automated territory locations
auto_terr_list %>%
purrr::map2(.x=., .y=plot_names, ~terr_ggplot(.x, .y, 'terr_status', TRUE))
# edit automated classifications
terr_reclass <- list(#c(), # Pre 2015
c(2, 10, 13, 16), # 2015 - 2016
c(4), # 2016 - 2017
c(6, 7), # 2017 - 2018
c(8, 18, 20), # 2018 - 2019 Bicton + Otterton
c(6, 13, 17), # 2019 - 2020 Bicton + Otterton
c(3, 34, 18, 26)) # 2020 - 2021  Bicton + Otterton, 3 on the Tale
poss_reclass <- list(#c(11), # Pre 2015 - n11 downgraded as this was absent in 2015 and ind. known to have established at n8.
c(9), # 2015 - 2016
c(), # 2016 - 2017
c(10, 13), # 2017 - 2018
c(7), # 2018 - 2019
c(5), # 2019 - 2020
c()) # 2020 - 2021
# reclass territories where needed...
obj_list <- dplyr::lst(terr_l = auto_terr_list, terr_re = terr_reclass, poss_re = poss_reclass)
reclass_terr_list <- purrr::pmap(obj_list, ~user_classify(..1, ..2, ..3))
saveRDS(reclass_terr_list, file='R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list2.Rds')
# plot corrected territory classes
User_terr_panel <- function(buff, filname){
reclass_terr_list %>%
purrr::map2(.x=., .y=plot_names, ~terr_ggplot(.x, .y, 'user_class', FALSE, buffer=buff))%>%
panel_plot(., guide=TRUE, n_col=4) %>%
ggsave(filname, plot = .,
dpi=300, height=152, width=180, units='mm')
}
User_terr_panel(NULL, 'R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterTerrsUserSI.png')
# plot corrected territory classes
User_terr_panel <- function(buff, filname){
reclass_terr_list %>%
purrr::map2(.x=., .y=plot_names, ~terr_ggplot(.x, .y, 'user_class', FALSE, buffer=buff))%>%
panel_plot(., guide=TRUE, n_col=3) %>%
ggsave(filname, plot = .,
dpi=300, height=152, width=180, units='mm')
}
User_terr_panel(NULL, 'R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterTerrsUserSI.png')
User_terr_panel(100, 'R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterTerrsUser.png')
# check automated territory locations
set.seed(123)
auto_terr_list %>%
purrr::map2(.x=., .y=plot_names, ~terr_ggplot(.x, .y, 'terr_status', TRUE))
# edit automated classifications
terr_reclass <- list(#c(), # Pre 2015
c(1, 9, 13, 16), # 2015 - 2016
c(3), # 2016 - 2017
c(2, 7), # 2017 - 2018
c(3, 18, 20), # 2018 - 2019 Bicton + Otterton
c(3, 13, 16), # 2019 - 2020 Bicton + Otterton
c(16, 24, 11, 34)) # 2020 - 2021  Bicton + Otterton, 3 on the Tale
poss_reclass <- list(#c(11), # Pre 2015 - n11 downgraded as this was absent in 2015 and ind. known to have established at n8.
c(), # 2015 - 2016
c(), # 2016 - 2017
c(10), # 2017 - 2018
c(5), # 2018 - 2019
c(9), # 2019 - 2020
c()) # 2020 - 2021
# reclass territories where needed...
obj_list <- dplyr::lst(terr_l = auto_terr_list, terr_re = terr_reclass, poss_re = poss_reclass)
reclass_terr_list <- purrr::pmap(obj_list, ~user_classify(..1, ..2, ..3))
saveRDS(reclass_terr_list, file='R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list2.Rds')
# plot corrected territory classes
User_terr_panel <- function(buff, filname){
reclass_terr_list %>%
purrr::map2(.x=., .y=plot_names, ~terr_ggplot(.x, .y, 'user_class', FALSE, buffer=buff))%>%
panel_plot(., guide=TRUE, n_col=3) %>%
ggsave(filname, plot = .,
dpi=300, height=152, width=180, units='mm')
}
User_terr_panel(NULL, 'R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterTerrsUserSI.png')
set.seed(123)
# --------- Imports -----------------------
library(patchwork)
library(sf)
library(magrittr)
library(tidyverse)
library(patchwork)
library(ggfortify)
devtools::load_all()
# devtools::document()
#  -------------------- Data ------------------------
# RivOtter_Catch_Area # R Otter Catchment area - included with {beavertools}
# RivOtter_FeedSigns # R Otter Feeding Sign survey data
# RivOtter_OS # R Otter Survey data for Dwellings and Dams
# Filter unreliable historic data
RivOtter_FS <- RivOtter_FeedSigns %>%
filter(SurveySeason!= "Pre 2015")
RivOtter_OS <- RivOtter_OtherSigns %>%
filter(SurveySeason!= "Pre 2015")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
plot_names <- unique(RivOtter_FS$SurveySeason)
# ------- get Open Street Map River network ---------
OSM_rivers <- get_rivers(RivOtter_Catch_Area)
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = F, axes_units = F, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T,
guide_pos='bottom', wgs = F, mask_fill='grey80') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FS %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 3) %>%
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedSigns.png',plot = .,
dpi=300, height=152, width=180, units='mm')
# ------------- Confirmatory sign Maps --------------
conf_ggplot <- function(.data, pNames){
leg <- FALSE
if (pNames == '2019 - 2020'){
leg <- TRUE
}
fs <- plot_other_signs(.data, size = 1.5, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=leg, guide_pos='bottom',
mask_fill='grey80') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_conf_list <- RivOtter_OS %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
other_panel <- Otter_conf_list %>%
purrr::map2(.x=., .y= plot_names,  ~conf_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 3) %>%
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSigns.png',plot = .,
dpi=300, height=152, width=180, units='mm')
# -------------- Feeding Density Maps ---------------
fsd_ggplot <- function(.data, p.names){
plot_forage_density(.data, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE, guide = TRUE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, attribute=FALSE,
mask_fill = "grey80")+
labs(subtitle = p.names) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_blank()) +
guides(fill = guide_colourbar(title.vjust = 1, barheight = 0.5, title='Forage density (low-high)', ticks = FALSE))
}
kde_general_func <- function(kbw, lt){
RivOtter_FS %>%
group_by(SurveySeason) %>%
group_split()%>%
purrr::map(., ~forage_density(., 'FeedCat', kd_extent = target_ext, grid_size=20, kern_bw = kbw, low_thresh = lt))
}
kde_ras_list <- kde_general_func(200, 1e-10)
kde_ras_listVIS <- kde_general_func(250, 1e-12)
kde_panel <- function(kde_list, filename){
kde_list%>%
purrr::map2(.x=., .y=plot_names, ~fsd_ggplot(.x, .y)) %>%
panel_plot(., guide=TRUE, n_col = 3) %>%
ggsave(filename=filename,plot = .,
dpi=300, height=152, width=180, units='mm')
}
kde_panel(kde_ras_list, 'R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedDensitySI.png') # for SI material - harder to read
kde_panel(kde_ras_listVIS, 'R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedDensity.png') # exaggerated version for main paper.
# ---------- Territory Classification Maps ----------
terr_ggplot <- function(.data, pNames, fill.name, .lab, buffer=NULL){
if (!is.null(buffer)){
.data<-sf::st_buffer(.data, 50)
}
terr <- plot_territories(.data, fill.name, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext,
guide_pos='bottom', label = .lab, mask_fill = 'grey80') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
guides(fill = guide_legend(title='Home range class'))
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_confirm_list <- RivOtter_OS %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
auto_terr_list <- kde_ras_list %>%
purrr::map2(.x = ., .y= Otter_confirm_list,
.f = ~ estimate_territories(.x, .y, upper_thresh =0.95))
# check automated territory locations
auto_terr_list %>%
purrr::map2(.x=., .y=plot_names, ~terr_ggplot(.x, .y, 'terr_status', TRUE))
