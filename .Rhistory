guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
# create stacked plot.
long_df %>%
pop.dynams(., 'years_since', "Years since establishment", "none")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
# create plot.
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
geom_line(aes(group=reorder(cap_name, rev(cap_name))), col=cap_name)+
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
scale_fill_continuous_sequential("TealGrn", rev=F) +
guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.6, colour='grey10')+
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
geom_line(aes(group=reorder(cap_name, rev(cap_name))), color=cap_name)+
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
scale_fill_continuous_sequential("TealGrn", rev=F) +
guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.6, colour='grey10')+
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name))+
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
scale_fill_continuous_sequential("TealGrn", rev=F) +
guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.6, colour='grey10')+
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name))+
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
scale_colour_continuous_sequential("TealGrn", rev=F) +
scale_fill_continuous_sequential("TealGrn", rev=F) +
guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity"),
colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.6, colour='grey10')+
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name))+
stat_summary(fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
stat_summary(fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.6, colour='grey10')+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=1.5)+
stat_summary(fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
stat_summary(fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.6, colour='grey10')+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=1.3)+
stat_summary(fun = mean, geom = 'line', size=0.9, alpha=0.6, linetype=1, color="grey20") +
stat_summary(fun = min, geom = 'line', size=0.5, alpha=0.6, linetype=1, color="grey20") +
stat_summary(fun = max, geom = 'line', size=0.5, alpha=0.6, linetype=1, color="grey20") +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.6, colour='grey10')+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=1.2)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.6, colour='grey10')+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=1.2)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.6, colour='grey10')+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=1.2)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.8, colour='grey10')+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=1.2, alpha=0.7)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), inherit.aes = F, alpha=0.8, colour='grey10')+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
hacked_df
mgmt_scenario <- function(df, mgmt_start, rem_rate, s_name){
df %>%
mutate(!! dplyr::sym(fill_name) = 1)
}
mgmt_scenario <- function(df, mgmt_start, rem_rate, s_name){
df %>%
mutate(!! dplyr::sym(s_name) = 1)
}
mgmt_scenario <- function(df, mgmt_start, rem_rate, s_name){
df %>%
mutate(!! dplyr::sym(s_name) = 1)
}
mgmt_scenario <- function(df, mgmt_start, rem_rate, s_name){
df %>%
mutate(s_name = 1)
}
mgmt_scenario(hacked_df, mgmt_start = 2025, rem_rate = 5, s_name='scenario1')
dplyr::sym('s_name')
!!dplyr::sym('s_name')
mgmt_scenario <- function(df, mgmt_start, rem_rate, s_name){
df %>%
mutate(dplyr::sym(s_name) = 1)
}
mgmt_scenario <- function(df, mgmt_start, rem_rate, s_name){
df %>%
mutate(s_name) = 1)
}
?enquo
mgmt_scenario <- function(df, mgmt_start, rem_rate, s_name){
name <- enquo(s_name)
df %>%
mutate(!!(name) = 1)
}
mgmt_scenario <- function(df, mgmt_start, rem_rate, s_name){
# name <- enquo(s_name)
df %>%
mutate(!!(s_name) := 1) %>%
rename_()
}
mgmt_scenario(hacked_df, mgmt_start = 2025, rem_rate = 5, s_name='scenario1')
?pluck
mgmt_scenario <- function(df, mgmt_start, mgmt_n_terrs, s_name){
df %>%
mutate(!!(s_name) := ifelse(year_adj < mgmt_start, .fitted,
lag(.fitted) + pluck(n_terr_growth[n_terr_growth==lag(.fitted)]) - mgmt_n_terrs))
}
mgmt_scenario(hacked_df, mgmt_start = 2025, mgmt_n_terrs = 5, s_name='scenario1')
test_ <- mgmt_scenario(hacked_df, mgmt_start = 2025, mgmt_n_terrs = 5, s_name='scenario1')
test_ %>%
pivot_longer(., cols=c(.fitted, scenario1), names_to = "pop_scenario", values_to = 'pop_value')%>%
ggplot(., aes(y=pop_value, x=year_dj, colour=pop_scenario))+
geom_line()
test_ %>%
pivot_longer(., cols=c(.fitted, scenario1), names_to = "pop_scenario", values_to = 'pop_value')%>%
ggplot(., aes(y=pop_value, x=year_adj, colour=pop_scenario))+
geom_line()
mgmt_scenario <- function(df, mgmt_start, mgmt_n_terrs, s_name){
df %>%
mutate(!!(s_name) := ifelse(year_adj < mgmt_start, .fitted,
lag(!!(s_name)) + pluck(n_terr_growth[n_terr_growth==lag(.fitted)]) - mgmt_n_terrs))
}
test_ <- mgmt_scenario(hacked_df, mgmt_start = 2025, mgmt_n_terrs = 5, s_name='scenario1')
mgmt_scenario <- function(df, mgmt_start, mgmt_n_terrs, s_name){
df %>%
mutate(!!(s_name) := ifelse(year_adj < mgmt_start, .fitted,
lag(sym(!!(s_name))) + pluck(n_terr_growth[n_terr_growth==lag(.fitted)]) - mgmt_n_terrs))
}
test_ <- mgmt_scenario(hacked_df, mgmt_start = 2025, mgmt_n_terrs = 5, s_name='scenario1')
mgmt_scenario <- function(df, mgmt_start, mgmt_n_terrs, s_name){
df %>%
mutate(!!(s_name) := ifelse(year_adj < mgmt_start, .fitted,
lag(!!sym(s_name))) + pluck(n_terr_growth[n_terr_growth==lag(!!sym(s_name))]) - mgmt_n_terrs)
}
test_ <- mgmt_scenario(hacked_df, mgmt_start = 2025, mgmt_n_terrs = 5, s_name='scenario1')
mgmt_scenario <- function(df, mgmt_start, mgmt_n_terrs, s_name){
df %>%
mutate(.sim := ifelse(year_adj < mgmt_start, .fitted,
lag(.sim)) + pluck(n_terr_growth[n_terr_growth==lag(.sim)]) - mgmt_n_terrs)
}
test_ <- mgmt_scenario(hacked_df, mgmt_start = 2025, mgmt_n_terrs = 5, s_name='scenario1')
mgmt_scenario <- function(df, mgmt_start, mgmt_n_terrs, s_name){
df %>%
mutate(.sim = ifelse(year_adj < mgmt_start, .fitted,
lag(.sim)) + pluck(n_terr_growth[n_terr_growth==lag(.sim)]) - mgmt_n_terrs)
}
test_ <- mgmt_scenario(hacked_df, mgmt_start = 2025, mgmt_n_terrs = 5, s_name='scenario1')
mgmt_scenario <- function(df, mgmt_start, mgmt_n_terrs, s_name){
df %>%
mutate(.sim = .fitted,
.sim = ifelse(year_adj < mgmt_start, .fitted,
lag(.sim)) + pluck(n_terr_growth[n_terr_growth==lag(.sim)]) - mgmt_n_terrs)
}
test_ <- mgmt_scenario(hacked_df, mgmt_start = 2025, mgmt_n_terrs = 5, s_name='scenario1')
test_ %>%
pivot_longer(., cols=c(.fitted, scenario1), names_to = "pop_scenario", values_to = 'pop_value')%>%
ggplot(., aes(y=pop_value, x=year_adj, colour=pop_scenario))+
geom_line()
mgmt_scenario <- function(df, mgmt_start, mgmt_n_terrs, s_name){
df %>%
mutate(.sim = .fitted,
.sim = ifelse(year_adj < mgmt_start, .fitted,
lag(.sim)) + pluck(n_terr_growth[n_terr_growth==lag(.sim)]) - mgmt_n_terrs)
}
test_ <- mgmt_scenario(hacked_df, mgmt_start = 2025, mgmt_n_terrs = 5, s_name='scenario1')
test_ %>%
pivot_longer(., cols=c(.fitted, .sim), names_to = "pop_scenario", values_to = 'pop_value')%>%
ggplot(., aes(y=pop_value, x=year_adj, colour=pop_scenario))+
geom_line()
test_ %>%
pivot_longer(., cols=c(.fitted, .sim), names_to = "pop_scenario", values_to = 'pop_value')%>%
ggplot(., aes(y=pop_value, x=year_adj, colour=pop_scenario, group=pop_scenario))+
geom_line()
