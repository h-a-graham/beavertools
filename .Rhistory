as.numeric(sf::st_area(RivOtter_Catch_Area))/1e-6
as.numeric(sf::st_area(RivOtter_Catch_Area))/1e+6
long_df <- hacked_df %>%
pivot_longer(., cols=c(growth_rate, n_terr_growth, hartman_rate), names_to = "mid", values_to = 'mid.long')%>%
# bind_cols(hacked_df %>%
#             pivot_longer(., cols=c(growth_rate.lwr, n_terr_growth.lwr), names_to = "lwr", values_to = 'lwr.long') %>%
#             select(lwr, lwr.long),
#           hacked_df %>%
#             pivot_longer(., cols=c(growth_rate.upr, n_terr_growth.upr), names_to = "upr", values_to = 'upr.long') %>%
#             select(upr, upr.long)) %>%
mutate(mid = ifelse(mid=='growth_rate', "Expansion Rate",
ifelse(mid=="n_terr_growth","New Territories per Year", "Expansion Rate / time")),
density = .fitted/as.numeric(sf::st_area(RivOtter_Catch_Area))/1e+6)
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))),lwd=1.6) +
# scale_fill_continuous_sequential("Batlow", rev=F) +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
long_df %>%
pop.dynams(., 'year_adj', 'Year', "none")/
long_df %>%
pop.dynams(., 'density', 'Number of Territories', "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
long_df <- hacked_df %>%
pivot_longer(., cols=c(growth_rate, n_terr_growth, hartman_rate), names_to = "mid", values_to = 'mid.long')%>%
# bind_cols(hacked_df %>%
#             pivot_longer(., cols=c(growth_rate.lwr, n_terr_growth.lwr), names_to = "lwr", values_to = 'lwr.long') %>%
#             select(lwr, lwr.long),
#           hacked_df %>%
#             pivot_longer(., cols=c(growth_rate.upr, n_terr_growth.upr), names_to = "upr", values_to = 'upr.long') %>%
#             select(upr, upr.long)) %>%
mutate(mid = ifelse(mid=='growth_rate', "Expansion Rate",
ifelse(mid=="n_terr_growth","New Territories per Year", "Expansion Rate / time")),
density = .fitted/(as.numeric(sf::st_area(RivOtter_Catch_Area))/1e+6))
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))),lwd=1.6) +
# scale_fill_continuous_sequential("Batlow", rev=F) +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
long_df %>%
pop.dynams(., 'year_adj', 'Year', "none")/
long_df %>%
pop.dynams(., 'density', 'Number of Territories', "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
long_df
long_df %>%
pop.dynams(., 'year_adj', 'years_since', "Years since establishment")/
long_df %>%
pop.dynams(., 'density', 'Number of Territories', "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
long_df %>%
pop.dynams(., 'year_adj', 'years_since', "Years since establishment")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (terrtories/km) ^2)), 'Density ', "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
long_df %>%
pop.dynams(., 'year_adj', 'years_since', "Years since establishment")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (terrtories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
long_df <- hacked_df %>%
pivot_longer(., cols=c(growth_rate, n_terr_growth, hartman_rate), names_to = "mid", values_to = 'mid.long')%>%
# bind_cols(hacked_df %>%
#             pivot_longer(., cols=c(growth_rate.lwr, n_terr_growth.lwr), names_to = "lwr", values_to = 'lwr.long') %>%
#             select(lwr, lwr.long),
#           hacked_df %>%
#             pivot_longer(., cols=c(growth_rate.upr, n_terr_growth.upr), names_to = "upr", values_to = 'upr.long') %>%
#             select(upr, upr.long)) %>%
mutate(mid = ifelse(mid=='growth_rate', "Expansion Rate",
ifelse(mid=="n_terr_growth","New Territories per Year", "Expansion Rate / time")),
density = .fitted/(as.numeric(sf::st_area(RivOtter_Catch_Area))/1e+6),
mid.long = ifelse(mid.long<0,0,mid.long))
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))),lwd=1.6) +
# scale_fill_continuous_sequential("Batlow", rev=F) +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
long_df %>%
pop.dynams(., 'year_adj', 'years_since', "Years since establishment")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
long_df %>%
pop.dynams(., 'year_adj', 'years_since', "Years since establishment")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
long_df %>%
pop.dynams(., 'years_since', "Years since establishment")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
long_df %>%
pop.dynams(., 'years_since', "Years since establishment", "none")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))),lwd=0.5) +
# scale_fill_continuous_sequential("Batlow", rev=F) +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
long_df %>%
pop.dynams(., 'years_since', "Years since establishment", "none")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))),lwd=1.6) +
# scale_fill_continuous_sequential("Batlow", rev=F) +
scale_colour_continuous_sequential("TealGrn", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
long_df %>%
pop.dynams(., 'years_since', "Years since establishment", "none")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
# ------------ imports --------------------
# devtools::document()
# devtools::load_all()
# devtools::uninstall()
devtools::install()
devtools::install()
install.packages('spatstat.sparse')
devtools::install()
library(patchwork)
library(sf)
library(magrittr)
library(tidyverse)
library(patchwork)
library(ggfortify)
library(investr)
library(colorspace)
devtools::load_all()
#----- Define some directories -----------------
plot_dir <- file.path(here::here(),"R_Otter_workflow/3_Pop_expansion_predictions/plots")
sim_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
# ---- Read in Data Territroy count data --------------
reclass_terr_list <- readRDS(file='R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# get unique names for survey years...
plot_names <- unique(RivOtter_FeedSigns$SurveySeason)
# What is the capacity of the catchment? WILL NEED UPDATING WITH RANGES ETC WHEN SIMULATIONS ARE DONE.
cap_limits <- read_rds(file.path(sim_dir, 'sim_terr.Rds')) %>%
sf::st_drop_geometry() %>%
summarise(lowest = min(n),
highest = max(n))
lower_capacity = cap_limits$lowest
upper_capacity = cap_limits$highest
library(patchwork)
library(sf)
library(magrittr)
library(tidyverse)
library(patchwork)
library(ggfortify)
library(investr)
library(colorspace)
devtools::load_all()
#----- Define some directories -----------------
plot_dir <- file.path(here::here(),"R_Otter_workflow/3_Pop_expansion_predictions/plots")
sim_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
# ---- Read in Data Territroy count data --------------
reclass_terr_list <- readRDS(file='R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# get unique names for survey years...
plot_names <- unique(RivOtter_FeedSigns$SurveySeason)
# What is the capacity of the catchment? WILL NEED UPDATING WITH RANGES ETC WHEN SIMULATIONS ARE DONE.
cap_limits <- read_rds(file.path(sim_dir, 'sim_terr.Rds')) %>%
sf::st_drop_geometry() %>%
summarise(lowest = min(n),
highest = max(n))
lower_capacity = cap_limits$lowest
upper_capacity = cap_limits$highest
#  ------- set up dataframe for observed territory counts... -------
date_list <- lubridate::dmy(c("30-12-2014", "30-12-2015", "30-12-2016",
"30-12-2017", "30-12-2018", "30-12-2019",
"30-12-2020"))
years_since_release <- c(8:14)
get_terr_counts <- function(terr_map, .season, .year, .ysr){
terr_map %>%
dplyr::filter(user_class == 'Territory') %>%
summarise(terr_count = n(), season= .season, year = .year, years_since = .ysr)
}
count_obj_list <- list(reclass_terr_list, plot_names, date_list, years_since_release)
terr_counts <-  purrr::pmap(count_obj_list, ~get_terr_counts(..1, ..2, ..3, ..4)) %>%
bind_rows() %>%
mutate(year_adj = years_since + 2007) %>%
mutate(terr_count = ifelse(season %in% c('2018 - 2019', '2019 - 2020'), terr_count+1,
ifelse(season %in% c('2020 - 2021'),terr_count + 2, terr_count))) # required because
terr_counts
# --------- Imports -----------------------
library(patchwork)
library(sf)
library(magrittr)
library(tidyverse)
library(patchwork)
library(ggfortify)
devtools::load_all()
# devtools::document()
#  -------------------- Data ------------------------
# RivOtter_Catch_Area # R Otter Catchment area - included with {beavertools}
# RivOtter_FeedSigns # R Otter Feeding Sign survey data
# RivOtter_OtherSigns # R Otter Survey data for Dwellings and Dams
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
plot_names <- unique(RivOtter_FeedSigns$SurveySeason)
# ------- get Open Street Map River network ---------
OSM_rivers <- get_rivers(RivOtter_Catch_Area)
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4)
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedSignsNBMb.png',plot = feed_panel, dpi=300, height=7, width=10)
# ------------- Confirmatory sign Maps --------------
conf_ggplot <- function(.data, pNames){
leg <- FALSE
if (pNames == '2019 - 2020'){
leg <- TRUE
}
fs <- plot_other_signs(.data, size = 1.5, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=leg, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_conf_list <- RivOtter_OtherSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
other_panel <- Otter_conf_list %>%
purrr::map2(.x=., .y= plot_names,  ~conf_ggplot(.x, .y))%>%
panel_plot(., guide=TRUE, n_col = 4)
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterOtherSignsb.png',plot = other_panel, dpi=300, height=7, width=10)
# -------------- Feeding Density Maps ---------------
fsd_ggplot <- function(.data, p.names){
plot_forage_density(.data, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE, guide = TRUE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, attribute=FALSE,
guide_width=0.5)+
labs(subtitle = p.names) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
kde_ras_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()%>%
purrr::map(., ~forage_density(., 'FeedCat', kd_extent = target_ext))
kde_panel <- kde_ras_list %>%
purrr::map2(.x=., .y=plot_names, ~fsd_ggplot(.x, .y)) %>%
panel_plot(., guide=TRUE, n_col = 4)
ggsave('R_Otter_workflow/1_Feed_Sign_Mapping/maps/OtterFeedDensityb.png',plot = kde_panel, dpi=300, height=7, width=10)
# ---------- Territory Classification Maps ----------
terr_ggplot <- function(.data, pNames, fill.name, .lab ){
terr <- plot_territories(.data, fill.name, basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide_pos='bottom', label = .lab) +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_confirm_list <- RivOtter_OtherSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
auto_terr_list <- kde_ras_list %>%
purrr::map2(.x = ., .y= Otter_confirm_list,
.f = ~ estimate_territories(.x, .y, upper_thresh =0.95))
# create panel plot of territory locations
terr_panel <- auto_terr_list %>%
purrr::map2(.x=., .y=plot_names, ~terr_ggplot(.x, .y, 'terr_status', TRUE))%>%
panel_plot(., guide=TRUE, n_col = 4)
devtools::load_all()
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = F, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))
feed_panel[[1]]
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = T, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))
feed_panel[[1]]
devtools::load_all()
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = T, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))
feed_panel[[1]]
devtools::load_all()
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = T, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))
feed_panel[[1]]
?annotation_map_tile
devtools::load_all()
devtools::load_all()
--------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = T, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))
feed_panel[[1]]
# ------------ imports --------------------
# devtools::document()
# devtools::load_all()
# devtools::uninstall()
devtools::install()
?define_extent
?coord_fixed
?coordinates
devtools::load_all()
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
plot_names <- unique(RivOtter_FeedSigns$SurveySeason)
# ------- get Open Street Map River network ---------
OSM_rivers <- get_rivers(RivOtter_Catch_Area)
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = T, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))
feed_panel[[1]]
devtools::load_all()
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
plot_names <- unique(RivOtter_FeedSigns$SurveySeason)
# ------- get Open Street Map River network ---------
OSM_rivers <- get_rivers(RivOtter_Catch_Area)
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = T, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))
feed_panel[[1]]
devtools::install()
devtools::load_all()
# --------------- Feeding Sign Maps -----------------
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = T, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))
feed_panel[[1]]
fs_ggplot <- function(.data, pNames){
fs <- plot_feeding(.data, weight_aes = c(0.75,1.5,3), basemap = T, axes_units = T, north_arrow = FALSE, scalebar = FALSE,
catchment = RivOtter_Catch_Area, rivers = OSM_rivers, plot_extent = target_ext, guide=T, guide_pos='bottom') +
labs(subtitle =  pNames) +
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
}
# generate list of confirmatory sign tibbles - split by survey season
Otter_fs_list <- RivOtter_FeedSigns %>%
group_by(SurveySeason) %>%
group_split()
# generate list of sf objects with estimated territory locations/status
feed_panel <- Otter_fs_list %>%
purrr::map2(.x=., .y= plot_names,  ~fs_ggplot(.x, .y))
feed_panel[[1]]
devtools::install()
