hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.7)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), lwd=2, shape=23, size=1.5)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.7)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), stroke=2, shape=23, size=1.5)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.7)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), stroke=1.2, shape=23, size=1.5)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.7)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), stroke=1.2, shape=23, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.7)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), shape=23, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
# create plot.
hacked_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
### This bit adds the ribbon to show estimated maximum  terr. capacity.
# geom_ribbon(data=ribbon_df(), aes(ymin=lower_capacity, ymax=upper_capacity, xmin=2000),
#             fill='grey90', size=0.1, alpha=0.2, linetype=2, color="grey10") +
# annotate("text", x=2020, y = mid_cap(),
#          label = "predicted territory capacity range", size=3) +
# geom_segment(aes(x = 2020, y = mid_cap() + 5, xend = 2020, yend = upper_capacity -1),
#              arrow = arrow(length = unit(0.01, "npc")),lwd=0.5, color="grey20") +
# geom_segment(aes(x = 2020, y = mid_cap() - 5, xend = 2020, yend = lower_capacity +1),
# arrow = arrow(length = unit(0.01, "npc")), lwd=0.5, color="grey20") +
### This gives just the lines
geom_line(aes(group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.7)+
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
## this generates the Confidence interval version (CIs are very debatable - safer to levave?)
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
# stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.6, linetype=1, color="grey20") +
# scale_fill_continuous_sequential("TealGrn", rev=F) +
# guides(fill = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
#adds mean model to plot
stat_summary(fun = mean, geom = 'line', size=0.6, alpha=0.6, linetype=1, color="grey20") +
# adds original data
geom_point(data=terr_counts, aes(x=year_adj, y=terr_count), shape=21, size=2)+
# define plot style n stuff
coord_cartesian(ylim=c(0,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0))) +
ggsave(file.path(plot_dir, 'TerritoryPredictionc.png'),
dpi=300, height=7, width=7)
long_df <- hacked_df %>%
pivot_longer(., cols=c(growth_rate, n_terr_growth, hartman_rate), names_to = "mid", values_to = 'mid.long')%>%
mutate(mid = ifelse(mid=='growth_rate', "Expansion Rate",
ifelse(mid=="n_terr_growth","New Territories per Year", "Expansion Rate / time")),
density = .fitted/(as.numeric(sf::st_area(RivOtter_Catch_Area))/1e+6))
# function to generate the desired pop dynamics plots.
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))),lwd=0.8) +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
# create stacked plot.
long_df %>%
pop.dynams(., 'years_since', "Years since establishment", "none")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
# function to generate the desired pop dynamics plots.
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))),lwd=0.5) +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
# create stacked plot.
long_df %>%
pop.dynams(., 'years_since', "Years since establishment", "none")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
# function to generate the desired pop dynamics plots.
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))),lwd=0.2) +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
# create stacked plot.
long_df %>%
pop.dynams(., 'years_since', "Years since establishment", "none")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
# function to generate the desired pop dynamics plots.
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))),, lwd=0.5, alpha=0.7) +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
# create stacked plot.
long_df %>%
pop.dynams(., 'years_since', "Years since establishment", "none")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
# function to generate the desired pop dynamics plots.
pop.dynams <- function(df, x_val, x_lab, leg_pos){
ggplot(df, aes(x=!! dplyr::sym(x_val) , y=mid.long , colour=cap_name))+
# geom_ribbon(aes(ymin=lwr.long, ymax = upr.long, group=reorder(cap_name, rev(cap_name)), fill=cap_name), lwd=0.9) +
geom_line(aes(group=c(reorder(cap_name, rev(cap_name)))), lwd=0.5, alpha=0.7) +
scale_colour_viridis_c(option='turbo')+
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
labs(x = x_lab, y='')+
theme_bw() +
theme(legend.position = leg_pos,
axis.title.x = element_text(margin = margin(t = 10, r = 0, b = 6, l = 0))) +
facet_wrap(~mid, scales = "free")
}
# create stacked plot.
long_df %>%
pop.dynams(., 'years_since', "Years since establishment", "none")/
long_df %>%
pop.dynams(., 'density', expression(paste("Density ", (territories/km) ^2)), "bottom") +
theme(strip.background = element_blank(), strip.text = element_blank()) +
ggsave(file.path(plot_dir, 'TerritoryDynamics.png'),
dpi=300, height=7, width=10)
# ------ management impacts ----------------
# This function fits the new management scenarios based on the time of management start and
# how many territories are removed each year.
source(file.path(here::here(), 'R_Otter_workflow/3_Pop_expansion_predictions/add_general_facet_labs.R'))
mgmt_scenario <- function(df, .mgmt_start, .mgmt_n_terrs) {
gen_mgmt_curve <- function(mgmt_start, mgmt_n_terrs){
growth_vec <- vector("double", length(nrow(df)))
for (i in seq_len(nrow(df))) {
if (df$year_adj[i] < mgmt_start){
g <- round(df$.fitted[i],2)
} else{
g_rate <- df$n_terr_growth[which.min(abs(df$.fitted - g))]
g <- g + g_rate - mgmt_n_terrs
}
growth_vec[i] <- g
}
return(tibble(mgmt_growth = growth_vec,
mgmt_year = mgmt_start,
mgmt_removed = mgmt_n_terrs) %>%
bind_cols(df))
}
dist_func <- function(.year, .nList){
purrr::map(.nList, ~gen_mgmt_curve(.year, .)) %>%
bind_rows()
}
purrr::map(.mgmt_start, ~dist_func(., .mgmt_n_terrs)) %>%
bind_rows() #%>%
# mutate_if(is.numeric, ~replace(., .<0, NA))
}
mgmt_df <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., c(2022, 2025, 2030, 2035), c(5, 7, 10, 15))) %>%
bind_rows()
# create plot.
p <- mgmt_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# shows range of unmanaged scenario
stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
### This gives just the lines
geom_line(aes(y=mgmt_growth, group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.5)+
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
facet_grid(mgmt_removed ~ mgmt_year ) +
# define plot style n stuff
coord_cartesian(ylim=c(8,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0)))
# create plot.
p <- mgmt_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# shows range of unmanaged scenario
stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
### This gives just the lines
geom_line(aes(y=mgmt_growth, group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.7)+
scale_colour_viridis_c(option='turbo') +
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
facet_grid(mgmt_removed ~ mgmt_year ) +
# define plot style n stuff
coord_cartesian(ylim=c(8,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0)))
add_general_facet_labs(p, 'n territories removed each year', ' Year managment starts') %>%
ggsave(file.path(plot_dir, 'MgmtDynamics.png'), .,
dpi=300, height=7, width=10)
lower_capacity
upper_capacity
# create plot.
p <- mgmt_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# shows range of unmanaged scenario
stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
### This gives just the lines
geom_line(aes(y=mgmt_growth, group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.5)+
scale_colour_viridis_c(option='turbo') +
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
facet_grid(mgmt_removed ~ mgmt_year ) +
# define plot style n stuff
coord_cartesian(ylim=c(8,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0)))
add_general_facet_labs(p, 'n territories removed each year', ' Year managment starts') %>%
ggsave(file.path(plot_dir, 'MgmtDynamics.png'), .,
dpi=300, height=7, width=10)
# ------ management impacts ----------------
# This function fits the new management scenarios based on the time of management start and
# how many territories are removed each year.
source(file.path(here::here(), 'R_Otter_workflow/3_Pop_expansion_predictions/add_general_facet_labs.R'))
mgmt_scenario <- function(df, .mgmt_start, .mgmt_n_terrs) {
gen_mgmt_curve <- function(mgmt_start, mgmt_n_terrs){
growth_vec <- vector("double", length(nrow(df)))
for (i in seq_len(nrow(df))) {
if (df$year_adj[i] < mgmt_start){
g <- round(df$.fitted[i],2)
} else{
g_rate <- df$n_terr_growth[which.min(abs(df$.fitted - g))]
g <- g + g_rate - mgmt_n_terrs
}
growth_vec[i] <- g
}
return(tibble(mgmt_growth = growth_vec,
mgmt_year = mgmt_start,
mgmt_removed = mgmt_n_terrs) %>%
bind_cols(df))
}
dist_func <- function(.year, .nList){
purrr::map(.nList, ~gen_mgmt_curve(.year, .)) %>%
bind_rows()
}
purrr::map(.mgmt_start, ~dist_func(., .mgmt_n_terrs)) %>%
bind_rows() #%>%
# mutate_if(is.numeric, ~replace(., .<0, NA))
}
mgmt_df <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., c(2022, 2025, 2030, 2035), c(5, 7, 10, 15))) %>%
bind_rows()
# create plot.
p <- mgmt_df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# shows range of unmanaged scenario
stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
### This gives just the lines
geom_line(aes(y=mgmt_growth, group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.5)+
scale_colour_viridis_c(option='turbo') +
# scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity")) +
facet_grid(mgmt_removed ~ mgmt_year ) +
# define plot style n stuff
coord_cartesian(ylim=c(8,upper_capacity +5), xlim = c(2007, 2045))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0)))
add_general_facet_labs(p, 'n territories removed each year', ' Year managment starts') %>%
ggsave(file.path(plot_dir, 'MgmtDynamics.png'), .,
dpi=300, height=7, width=10)
