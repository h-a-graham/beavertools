guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.vjust=1)) +
facet_grid(mgmt_removed ~ mgmt_year ) +
# define plot style n stuff
coord_cartesian(ylim=c(8,upper_capacity +5), xlim = c(2015, 2060))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0)))
}
mgmt_p <- mgmt_plot(mgmt_df)
mgmt_p
add_general_facet_labs(mgmt_p, 'n territories removed each year', ' Year managment starts') %>%
ggsave(file.path(plot_dir, 'MgmtDynamics.png'), .,
dpi=600, height=180, width=180, units='mm')
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., seq(2022, 2036, by=2),
seq(1, 13, by=2))) %>%
bind_rows()
mgmt_p_matrix <- mgmt_plot(mgmt_df_big) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 3)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 3))
mgmt_p_matrix2 <- add_general_facet_labs(mgmt_p_matrix, 'n territories removed each year', ' Year managment starts')
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., seq(2022, 2036, by=2),
seq(1, 13, by=2))) %>%
bind_rows()
hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., seq(2022, 2036, by=2),
seq(1, 13, by=2)))
hacked_df
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., seq(2022, 2030, by=2),
seq(1, 13, by=2))) %>%
bind_rows()
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., seq(2022, 2030, by=2),
seq(1, 13, by=2))) %>%
bind_rows()
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., seq(2022, 2030, by=2),
seq(1, 10, by=2))) %>%
bind_rows()
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., c(2022, 2026, 2030), c(2, 3, 5, 10)))) %>%
bind_rows()
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., c(2022, 2026, 2030), c(2, 3, 5, 10))) %>%
bind_rows()
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., seq(2022, 2030, by=2),
seq(2, 10, by=2))) %>%
bind_rows()
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., seq(2022, 2030, by=2),
seq(2, 13, by=2))) %>%
bind_rows()
mgmt_p_matrix <- mgmt_plot(mgmt_df_big) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 3)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 3))
mgmt_p_matrix2 <- add_general_facet_labs(mgmt_p_matrix, 'n territories removed each year', ' Year managment starts')
s <- 0.6
ggsave(file.path(plot_dir, 'MgmtDynamicsMatrix.png'), mgmt_p_matrix2,
dpi=600, height=315*s, width=480*s, units='mm')
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., seq(2022, 2030, by=2),
seq(2, 13, by=1))) %>%
bind_rows()
mgmt_p_matrix <- mgmt_plot(mgmt_df_big) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 3)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 3))
mgmt_p_matrix2 <- add_general_facet_labs(mgmt_p_matrix, 'n territories removed each year', ' Year managment starts')
s <- 0.6
ggsave(file.path(plot_dir, 'MgmtDynamicsMatrix.png'), mgmt_p_matrix2,
dpi=600, height=315*s, width=480*s, units='mm')
mgmt_df_big <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., seq(2022, 2030, by=2),
seq(2, 14, by=2))) %>%
bind_rows()
mgmt_p_matrix <- mgmt_plot(mgmt_df_big) +
scale_x_continuous(breaks = scales::pretty_breaks(n = 3)) +
scale_y_continuous(breaks = scales::pretty_breaks(n = 3))
mgmt_p_matrix2 <- add_general_facet_labs(mgmt_p_matrix, 'n territories removed each year', ' Year managment starts')
s <- 0.6
ggsave(file.path(plot_dir, 'MgmtDynamicsMatrix.png'), mgmt_p_matrix2,
dpi=600, height=315*s, width=480*s, units='mm')
# quick summary stats for the paper.
library(beavertools)
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
library(here)
# n feeding signs:
n_signs <- RivOtter_FeedSigns %>%
mutate(year = ifelse(SurveySeason=='2015 - 2016' , 2016,
ifelse(SurveySeason== '2016 - 2017', 2017,
ifelse(SurveySeason== '2017 - 2018', 2018,
ifelse(SurveySeason== '2018 - 2019', 2019,
ifelse(SurveySeason== '2019 - 2020', 2020,
2021)))))) %>%
group_by(year, FeedCat)%>%
summarise(n =n()) %>%
mutate(FeedCat = ifelse(FeedCat=='Low', 'Low effort',
ifelse(FeedCat=='Med', 'Medium effort',
'High effort'))) %>%
mutate(FeedCat = fct_relevel(FeedCat, 'Low effort', 'Medium effort', 'High effort'))
n_signs_c <- n_signs %>%
summarise(n =sum(n)) %>%
mutate(add_lab = 'Total feeding sign count')
p_func <- function(df, xlab = '', ylab='', html_col = '#8DBCE5'){
ggplot(df, aes(x=year, y= n)) +
geom_point()+
geom_smooth(method = 'glm', method.args = list(family = gaussian(link = 'log')), colour=html_col) +
labs(x=xlab, y = ylab) +
theme_bw()
}
p1 <- p_func(n_signs, ylab='n recorded feeding signs') +
facet_wrap(~FeedCat, scales='free')
p2 <- p_func(n_signs_c, xlab='year', html_col = '#4074E5')+
facet_wrap(~add_lab)
p3 <- p1/p2
p3
ggsave(filename = file.path(here(), 'R_Otter_workflow/4_summ_stats/plots/feeding_trends.png'), plot=p3,
dpi=300, height=152, width=180, units='mm')
terr_list <- readRDS(file=file.path(here::here(),'R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list2.Rds'))
survey_years <- unique(RivOtter_FeedSigns$SurveySeason)
date_list <- lubridate::dmy(c("30-12-2015", "30-12-2016",
"30-12-2017", "30-12-2018", "30-12-2019",
"30-12-2020"))
years_since_release <- c(9:14)
get_terr_counts <- function(terr_map, .season, .year, .ysr){
terr_map %>%
dplyr::filter(user_class == 'Territory') %>%
summarise(n = dplyr::n(), season= .season, year = .year, years_since = .ysr)
}
count_obj_list <- list(terr_list, survey_years, date_list, years_since_release)
terr_counts <-  purrr::pmap(count_obj_list, ~get_terr_counts(..1, ..2, ..3, ..4)) %>%
bind_rows() %>%
st_drop_geometry() %>%
tibble() %>%
mutate(year_adj = years_since + 2007) %>%
mutate(n = ifelse(season %in% c('2018 - 2019', '2019 - 2020'), n+1,
ifelse(season %in% c('2020 - 2021'),n + 2, n))) %>% # required because some territories not correctly identified due to semi-automate process.
mutate(name = 'Territory counts')
# n feeding signs:
n_signs <- RivOtter_FeedSigns %>%
filter(SurveySeason!= "Pre 2015") %>%
mutate(year = ifelse(SurveySeason=='2015 - 2016' , 2016,
ifelse(SurveySeason== '2016 - 2017', 2017,
ifelse(SurveySeason== '2017 - 2018', 2018,
ifelse(SurveySeason== '2018 - 2019', 2019,
ifelse(SurveySeason== '2019 - 2020', 2020,
2021)))))) %>%
group_by(year, FeedCat)%>%
summarise(n =n()) %>%
mutate(FeedCat = ifelse(FeedCat=='Low', 'Low effort',
ifelse(FeedCat=='Med', 'Medium effort',
'High effort'))) %>%
mutate(FeedCat = fct_relevel(FeedCat, 'Low effort', 'Medium effort', 'High effort'))
n_signs_c <- n_signs %>%
summarise(n =sum(n)) %>%
mutate(add_lab = 'Total feeding sign count')
p_func <- function(df, xlab = '', ylab='', html_col = '#8DBCE5'){
ggplot(df, aes(x=year, y= n)) +
geom_point()+
geom_smooth(method = 'glm', method.args = list(family = gaussian(link = 'log')), colour=html_col) +
labs(x=xlab, y = ylab) +
theme_bw()
}
p1 <- p_func(n_signs, ylab='n recorded feeding signs') +
facet_wrap(~FeedCat, scales='free')
p2 <- p_func(n_signs_c, xlab='year', html_col = '#4074E5')+
facet_wrap(~add_lab)
p3 <- p1/p2
ggsave(filename = file.path(here(), 'R_Otter_workflow/4_summ_stats/plots/feeding_trends.png'), plot=p3,
dpi=300, height=152, width=180, units='mm')
terr_list <- readRDS(file=file.path(here::here(),'R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list2.Rds'))
survey_years <- unique(RivOtter_FeedSigns$SurveySeason)
date_list <- lubridate::dmy(c("30-12-2015", "30-12-2016",
"30-12-2017", "30-12-2018", "30-12-2019",
"30-12-2020"))
years_since_release <- c(9:14)
get_terr_counts <- function(terr_map, .season, .year, .ysr){
terr_map %>%
dplyr::filter(user_class == 'Territory') %>%
summarise(n = dplyr::n(), season= .season, year = .year, years_since = .ysr)
}
count_obj_list <- list(terr_list, survey_years, date_list, years_since_release)
terr_counts <-  purrr::pmap(count_obj_list, ~get_terr_counts(..1, ..2, ..3, ..4)) %>%
bind_rows() %>%
st_drop_geometry() %>%
tibble() %>%
mutate(year_adj = years_since + 2007) %>%
mutate(n = ifelse(season %in% c('2018 - 2019', '2019 - 2020'), n+1,
ifelse(season %in% c('2020 - 2021'),n + 2, n))) %>% # required because some territories not correctly identified due to semi-automate process.
mutate(name = 'Territory counts')
survey_years <- RivOtter_FeedSigns %>%
filter(SurveySeason!= "Pre 2015") %>%
pull(SurveySeason) %>% unique()
date_list <- lubridate::dmy(c("30-12-2015", "30-12-2016",
"30-12-2017", "30-12-2018", "30-12-2019",
"30-12-2020"))
years_since_release <- c(9:14)
get_terr_counts <- function(terr_map, .season, .year, .ysr){
terr_map %>%
dplyr::filter(user_class == 'Territory') %>%
summarise(n = dplyr::n(), season= .season, year = .year, years_since = .ysr)
}
count_obj_list <- list(terr_list, survey_years, date_list, years_since_release)
terr_counts <-  purrr::pmap(count_obj_list, ~get_terr_counts(..1, ..2, ..3, ..4)) %>%
bind_rows() %>%
st_drop_geometry() %>%
tibble() %>%
mutate(year_adj = years_since + 2007) %>%
mutate(n = ifelse(season %in% c('2018 - 2019', '2019 - 2020'), n+1,
ifelse(season %in% c('2020 - 2021'),n + 2, n))) %>% # required because some territories not correctly identified due to semi-automate process.
mutate(name = 'Territory counts')
p4 <- p_func(terr_counts, xlab='year', html_col = '#3DC660') +
facet_wrap(~name)
p5 <- p1/ (p2 | p4)
p5
p5
mgmt_df <- hacked_df %>%
group_by(cap_name) %>%
group_split() %>%
purrr::map(., ~ mgmt_scenario(., c(2022, 2026, 2030), c(2, 3, 5, 8))) %>%
bind_rows()
# sum stats for paper:
mgmt_df %>%
# filter(mgmt_year %in% c(2022, 2025, 2035)) %>%
filter(mgmt_removed == 5 | mgmt_removed == 7) %>%
filter(cap_name == 120 |cap_name == 183) %>%
group_by(mgmt_year, mgmt_removed, cap_name) %>%
summarise(mgmt_cap = last(mgmt_growth), max_cap = last(.fitted)) %>%
mutate(perc_decline = (max_cap-mgmt_cap)/max_cap*100)
# create plot.
mgmt_plot <- function(df){
df %>%
# filter(cap_name==115)%>%
ggplot(., aes(x=year_adj, y=.fitted))+
# shows range of unmanaged scenario
# stat_summary(fun = min, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
# stat_summary(fun = max, geom = 'line', size=0.4, alpha=0.6, linetype=2, color="grey20") +
geom_ribbon(aes(ymin=mgmt_growth.lwr, ymax = mgmt_growth.upr,
group=reorder(cap_name, rev(cap_name))),
fill='#18BFC2', alpha=0.04) +
stat_summary(aes(y=mgmt_growth.lwr), fun = min, geom = 'line', size=0.3, alpha=0.9, linetype=1, color="grey10") +
stat_summary(aes(y=mgmt_growth.upr),fun = max, geom = 'line', size=0.3, alpha=0.9, linetype=1, color="grey10") +
# geom_ribbon(aes(ymin=pred.lwr, ymax = pred.upr, group=reorder(cap_name, rev(cap_name)), fill=cap_name), colour=NA) +
stat_summary(aes(y=pred.lwr), fun = min, geom = 'line', size=0.3, alpha=0.9, linetype=2, color="grey10") +
stat_summary(aes(y=pred.upr),fun = max, geom = 'line', size=0.3, alpha=0.9, linetype=2, color="grey10") +
### This gives just the lines
# geom_line(aes(y=mgmt_growth, group=reorder(cap_name, rev(cap_name)), color=cap_name), lwd=0.5, alpha=0.5)+
# scale_colour_viridis_c(option='turbo') +
scale_colour_continuous_sequential("Batlow", rev=F) +
guides(colour = guide_colourbar(barwidth = 8, barheight = 0.5, title="Territory Capacity", title.vjust=1)) +
facet_grid(mgmt_removed ~ mgmt_year ) +
# define plot style n stuff
coord_cartesian(ylim=c(8,upper_capacity +5), xlim = c(2015, 2060))+
labs(x = 'Year', y="Number of Territories")+
theme_bw() +
theme(legend.position = "bottom",
axis.title.y = element_text(margin = margin(t = 0, r = 3, b = 0, l = 0)),
axis.title.x = element_text(margin = margin(t = 3, r = 0, b = 0, l = 0)))
}
mgmt_p <- mgmt_plot(mgmt_df)
mgmt_p
add_general_facet_labs(mgmt_p, 'n territories removed each year', ' Year managment starts') %>%
ggsave(file.path(plot_dir, 'MgmtDynamics.png'), .,
dpi=600, height=180, width=180, units='mm')
# function to plot and combine with {patchwork} the kde and territory plots
sidebyside_ggplot <- function(.feeding, .kde, .terr, p.name){
feed_points <- plot_feeding(.feeding, basemap = F, guide = TRUE,
catchment = RivOtter_Catch_Area, rivers=OSM_rivers,
plot_extent = target_ext, axes_units = FALSE,
north_arrow = F, scalebar = F, mask_fill = 'grey80')+
theme(legend.position="bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
fsd <- plot_forage_density(.kde, basemap = F, guide = TRUE,
catchment = RivOtter_Catch_Area, rivers=OSM_rivers,
plot_extent = target_ext, axes_units = FALSE,
guide_width=0.5, north_arrow = F, scalebar = F, mask_fill = 'grey80') +
ggplot2::scale_fill_viridis_c(na.value = NA, name= sprintf('%s Forage Density', 'log10'),
trans='log10', n.breaks=3, limits=c(1.1e-10, 3.2e-06)) +
theme(legend.position="bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.text=element_blank()) +
guides(fill = guide_colourbar(title.vjust = 1, barheight = 0.5, title='Forage density (low-high)', ticks = FALSE))
terr <- plot_territories(.terr, basemap = F,'user_class', guide = TRUE,
catchment = RivOtter_Catch_Area,rivers=OSM_rivers,
plot_extent = target_ext, axes_units = FALSE,
mask_fill = 'grey80') +
theme(legend.position="bottom",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())+
guides(fill = guide_legend(title='Home range class'))
combined <- feed_points + fsd + terr
combined <- combined  + plot_annotation(
subtitle =  p.name)
return(combined)
}
# create list of rasters, territrories and names for the map funtion
obj_list <- list(Otter_fs_list, kde_ras_list, reclass_terr_list, plot_names)
# map the above function to the list and animate it.
joint_animation <- purrr::pmap(.l=obj_list, ~sidebyside_ggplot(..1, ..2, ..3, ..4))
animate_maps(joint_animation, filename = 'R_Otter_workflow/1_Feed_Sign_Mapping/maps/AnimatedFeeding.gif')
# ------------ imports --------------------
# devtools::document()
# devtools::load_all()
# devtools::uninstall()
# devtools::install()
library(beavertools)
library(tidyverse)
library(sf)
library(broom)
library(patchwork)
export_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/exports")
plot_dir <- file.path(here::here(),"R_Otter_workflow/2_Territory_simulations/plots")
# ----- generate extent and titles for mapping ------
target_ext <- inflate_bbox(RivOtter_Catch_Area, 10)
Real_terrs <- readRDS('R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list.Rds')
# MasterMap River Network not released with the package due to licensing issues.
MMRN_BeavNetOtter <- sf::read_sf('run/data/BeaverNetwork_Otter.gpkg') # MasterMap Data
#------- Observed territory Habitat stats ----------
# need to calculate some stats here and find out what kind of BFI values we're currently seeing on the Otter.
terr_list <- readRDS(file=file.path(here::here(),'R_Otter_workflow/1_Feed_Sign_Mapping/exports/reclass_terr_list2.Rds'))
survey_years <- unique(RivOtter_FeedSigns$SurveySeason)
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
lower_BFI <- round(min(Terr_df$mean_BFI_40m),1)
survey_years <- RivOtter_FeedSigns %>%
filter(SurveySeason!= "Pre 2015") %>%
pull(SurveySeason) %>% unique()
source(file.path(here::here(), 'R_Otter_workflow/2_Territory_simulations/terr_BFI_df.R'))
Terr_df <- terr_BFI_df(terr_list, MMRN_BeavNetOtter, survey_years)
lower_BFI <- round(min(Terr_df$mean_BFI_40m),1)
upper_BFI <- round(mean(Terr_df$mean_BFI_40m), 1)
message(sprintf("Lower BFI threshold: %s \nUpper BFI threshold: %s",lower_BFI, upper_BFI))
# ---------- run terriroty generation for all reaches for each network
run_terr_gen <- function(riv_network, overwrite=FALSE, save_out=TRUE){
fileName <- file.path(export_dir, paste('PT_', deparse(substitute(riv_network)),'.Rds', sep=""))
# print(fileName)
if (file.exists(fileName) && isFALSE(overwrite)){
message(sprintf("Potential territrories created in: %s", fileName))
message("Loading previously generated file...")
terr_out <- readRDS(fileName)
} else{
t1 <- Sys.time()
terr_out <-  gen_territories(riv_network, multicore = T, progbar = T)
if (isTRUE(save_out)){
saveRDS(terr_out, file=fileName)
}
message(sprintf('Potential Territory Generation Run Time = %s minutes', round(Sys.time()-t1,1)))
}
return(terr_out)
}
lower_BFI
# ---------- run terriroty generation for all reaches for each network
run_terr_gen <- function(riv_network, overwrite=FALSE, save_out=TRUE){
fileName <- file.path(export_dir, paste('PT_', deparse(substitute(riv_network)),'.Rds', sep=""))
# print(fileName)
if (file.exists(fileName) && isFALSE(overwrite)){
message(sprintf("Potential territrories created in: %s", fileName))
message("Loading previously generated file...")
terr_out <- readRDS(fileName)
} else{
t1 <- Sys.time()
terr_out <-  gen_territories(riv_network, multicore = T, progbar = T)
if (isTRUE(save_out)){
saveRDS(terr_out, file=fileName)
}
message(sprintf('Potential Territory Generation Run Time = %s minutes', round(Sys.time()-t1,1)))
}
return(terr_out)
}
RivOtter_Terrs <- run_terr_gen(MMRN_BeavNetOtter)
(nrow(MMRN_BeavNetOtter) - nrow(RivOtter_Terrs))/nrow(MMRN_BeavNetOtter)*100
# ------------- Run territory cap -------------
run_terr_cap <- function(pot_terrs, veg, overwrite=FALSE, save_out=TRUE){
fileName <- file.path(export_dir, paste('TC_', deparse(substitute(pot_terrs)),'.Rds', sep=""))
# print(fileName)
if (file.exists(fileName) && isFALSE(overwrite)){
message(sprintf("Territory capacity created in: %s", fileName))
message("Loading previously generated file...")
cap_out <- readRDS(fileName)
} else {
t1 <- Sys.time()
cap_out <-territory_cap(pot_terrs, min_veg = veg , multicore = TRUE)
if (isTRUE(save_out)){
saveRDS(cap_out, file=fileName)
}
message(sprintf('Territory Capacity Run Time = %s minutes', round(Sys.time()-t1,1)))
}
return(cap_out)
}
RivOtter_Terrs_upper <- RivOtter_Terrs
terr_cap_lowBFI <- run_terr_cap(RivOtter_Terrs, lower_BFI, overwrite=F)
terr_cap_uppBFI <- run_terr_cap(RivOtter_Terrs_upper, upper_BFI, overwrite=F)
Terr_Cap_df <- terr_cap_lowBFI %>%
mutate(sim=as.character(lower_BFI)) %>%
bind_rows(., terr_cap_uppBFI %>%
mutate(sim=as.character(upper_BFI)))
# plot showing the territory length distributions for each of these example simulations.
ggplot(Terr_Cap_df, aes(x=Terr_Leng, fill=sim, after_stat(count))) +
geom_density(alpha=0.5) +
labs(x='territory length (m)', fill='minimum BFI threshold') +
scale_fill_brewer(palette = "Dark2")+
theme_bw() +
theme(legend.position = "bottom") +
ggsave(filename = file.path(plot_dir, 'TerritoryLengthDist.png'), dpi=600, height=180, width=180, units='mm')
# plot showing the territory length distributions for each of these example simulations.
ggplot(Terr_Cap_df, aes(x=Terr_Leng, fill=sim, after_stat(count))) +
geom_density(alpha=0.5) +
labs(x='territory length (m)', fill='minimum BFI threshold') +
scale_fill_brewer(palette = "Dark2")+
theme_bw() +
theme(legend.position = "bottom") %>%
ggsave(filename = file.path(plot_dir, 'TerritoryLengthDist.png'), plot = .,
dpi=600, height=180, width=180, units='mm')
# plot showing the territory length distributions for each of these example simulations.
tl_dens <- ggplot(Terr_Cap_df, aes(x=Terr_Leng, fill=sim, after_stat(count))) +
geom_density(alpha=0.5) +
labs(x='territory length (m)', fill='minimum BFI threshold') +
scale_fill_brewer(palette = "Dark2")+
theme_bw() +
theme(legend.position = "bottom")
ggsave(filename = file.path(plot_dir, 'TerritoryLengthDist.png'), plot = tl_dens,
dpi=600, height=180, width=180, units='mm')
tl_dens
# summary stats for territory length if needed
Terr_sum_df <- Terr_Cap_df %>%
sf::st_drop_geometry()%>%
group_by(sim) %>%
summarise(mean_length = mean(Terr_Leng),
stdev_Length = sd(Terr_Leng),
n_terrs = n())
Terr_sum_df
capacity_plot <- function(cap_lowBFI, cap_uppBFI){
p1 <- plot_capacity(cap_uppBFI, buffer=50, basemap = F, catchment = RivOtter_Catch_Area,
river_net = MMRN_BeavNetOtter, plot_extent = target_ext, north_arrow = F,
scalebar = F, axes_units = F, add_hillshade =F, mask_fill = 'grey80')+
annotate("text", x = 304000, y = 81600, size = 2.4,
label = sprintf('n territories = %s',
Terr_sum_df$n_terrs[Terr_sum_df$sim == as.character(upper_BFI)]))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p2 <- plot_capacity(cap_lowBFI, buffer=50, basemap = F, catchment = RivOtter_Catch_Area,
river_net = MMRN_BeavNetOtter, plot_extent = target_ext,
axes_units = F, add_hillshade =F, , mask_fill = 'grey80')+
annotate("text", x = 304000, y = 81600, size = 2.4,
label = sprintf('n territories = %s',
Terr_sum_df$n_terrs[Terr_sum_df$sim == as.character(lower_BFI)]))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p3 <- p1 + p2 + plot_annotation(
caption = 'Contains: OS data © Crown copyright and database right 2021', #© OpenStreetMap contributors,
theme = theme(plot.caption = element_text(size = 6)))
return(p3)
}
capacity_plot <- function(cap_lowBFI, cap_uppBFI){
p1 <- plot_capacity(cap_uppBFI, buffer=50, basemap = F, catchment = RivOtter_Catch_Area,
river_net = MMRN_BeavNetOtter, plot_extent = target_ext, north_arrow = F,
scalebar = F, axes_units = F, add_hillshade =F, mask_fill = 'grey80')+
annotate("text", x = 304000, y = 81600, size = 2.4,
label = sprintf('n territories = %s',
Terr_sum_df$n_terrs[Terr_sum_df$sim == as.character(upper_BFI)]))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p2 <- plot_capacity(cap_lowBFI, buffer=50, basemap = F, catchment = RivOtter_Catch_Area,
river_net = MMRN_BeavNetOtter, plot_extent = target_ext,
axes_units = F, add_hillshade =F, mask_fill = 'grey80')+
annotate("text", x = 304000, y = 81600, size = 2.4,
label = sprintf('n territories = %s',
Terr_sum_df$n_terrs[Terr_sum_df$sim == as.character(lower_BFI)]))+
theme(panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p3 <- p1 + p2 + plot_annotation(
caption = 'Contains: OS data © Crown copyright and database right 2021', #© OpenStreetMap contributors,
theme = theme(plot.caption = element_text(size = 6)))
return(p3)
}
TerrCapPlot <- capacity_plot(terr_cap_lowBFI, terr_cap_uppBFI)
TerrCapPlot
ggsave(filename = file.path(plot_dir, 'Lower_Upper_Capacity_maps.png'), plot=TerrCapPlot,
dpi=300, height=138, width=180, units='mm')
