[{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"h-a-graham.github.io/beavertools/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2021 Hugh Graham  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. beavertools Copyright (C) 2021 Hugh Graham This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"h-a-graham.github.io/beavertools/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Hugh Graham. Author, maintainer.","code":""},{"path":"h-a-graham.github.io/beavertools/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Graham H (2021). beavertools: Tools monitor expansion beaver populations predict future territory capacity.. R package version 0.0.1.0, https://h--graham.github.io/beavertools.","code":"@Manual{,   title = {beavertools: Tools to monitor the expansion of beaver populations and predict future territory capacity.},   author = {Hugh Graham},   year = {2021},   note = {R package version 0.0.1.0},   url = {https://h-a-graham.github.io/beavertools}, }"},{"path":"h-a-graham.github.io/beavertools/index.html","id":"beavertools","dir":"","previous_headings":"","what":"Tools to monitor the expansion of beaver populations and predict future territory capacity.","title":"Tools to monitor the expansion of beaver populations and predict future territory capacity.","text":"package provides standardised methods monitor beaver populations predict future population dynamics.","code":""},{"path":"h-a-graham.github.io/beavertools/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation:","title":"Tools to monitor the expansion of beaver populations and predict future territory capacity.","text":"Check workflow River Otter Catchment see workflow example package. now, workflow images… example shows kernel density estimate feeding signs derived (automated) territory locations classification. enables us make estimates number territories present catchment time. River Otter Beaver Trial Forage Density examples shows modelling approach allow prediction territory capacity within catchment. present two maps, one low minimum habitat scenario another high minimum habitat scenario. run simulations estimate possible range territory capacity within catchment. Territory Capacity Scenarios Now know territory capacity can begin model population dynamics catchment. full code workflow check beavertools/R_Otter_workflow. combining known territory numbers time estimate exponential growth population derive logistic curve based , given range territory capacities used estimate asymptote. Population Growth curve can dive bit consider rate/absolute growth changes time population density… Population Dynamics Finally, can apply range management scenarios, n beaver territories removed year starting different times. gives us indication level manamgent may required stabilise population numbers < carrying capacity. Management Growth curves","code":"# install.packages(devtools) devtools::install_github(\"h-a-graham/beavertools\")"},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_BeaverNet.html","id":null,"dir":"Reference","previous_headings":"","what":"River Otter Beaver Network. — RivOtter_BeaverNet","title":"River Otter Beaver Network. — RivOtter_BeaverNet","text":"dataset ('sf' object) provides River Otter Beaver Network. line feature netowkr rivers R. Otter catchment associated reach values Beaver Dam Capacity (BDC) Beaver Forage Index (BFI). dataset can used territory simulation functions estimate number territories can supported within network. River Network OS Open Rivers Network. Methods generating Beaver Network can found paper: https://doi.org/10.1007/s10344-020-01379-w current repo can found : https://github.com/h--graham/BDC_V1.2. National scale Beaver Network released asap.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_BeaverNet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"River Otter Beaver Network. — RivOtter_BeaverNet","text":"","code":"RivOtter_BeaverNet"},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_BeaverNet.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"River Otter Beaver Network. — RivOtter_BeaverNet","text":"sf object 1289 features 26 fields: BDC Beaver Dam Capacity BDC_cat category assigned based BDC.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_BeaverNet.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"River Otter Beaver Network. — RivOtter_BeaverNet","text":"https://doi.org/10.1007/s10344-020-01379-w","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_Catch_Area.html","id":null,"dir":"Reference","previous_headings":"","what":"River Otter Catchment Area. — RivOtter_Catch_Area","title":"River Otter Catchment Area. — RivOtter_Catch_Area","text":"dataset ('sf' object) provides River Otter Catchment area. can used various plotting functions mask areas outside Otter catchment.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_Catch_Area.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"River Otter Catchment Area. — RivOtter_Catch_Area","text":"","code":"RivOtter_Catch_Area"},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_Catch_Area.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"River Otter Catchment Area. — RivOtter_Catch_Area","text":"sf object 1 rows 3 variables: Name Simply name catchment geometry geometry data catchment","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_Catch_Area.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"River Otter Catchment Area. — RivOtter_Catch_Area","text":"generated OS Terrain 5: https://www.ordnancesurvey.co.uk/business-government/products/terrain-5 using GRASS GIS (https://grass.osgeo.org/)","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_FeedSigns.html","id":null,"dir":"Reference","previous_headings":"","what":"Beaver Feeding Sign Locations recorded during the River Otter Beaver Trial. — RivOtter_FeedSigns","title":"Beaver Feeding Sign Locations recorded during the River Otter Beaver Trial. — RivOtter_FeedSigns","text":"dataset (sf object) includes locations, survey times, survey season impact level sign.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_FeedSigns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beaver Feeding Sign Locations recorded during the River Otter Beaver Trial. — RivOtter_FeedSigns","text":"","code":"RivOtter_FeedSigns"},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_FeedSigns.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Beaver Feeding Sign Locations recorded during the River Otter Beaver Trial. — RivOtter_FeedSigns","text":"sf object 3683 rows 4 variables: SurveySeason winter season sign surveyed RecordDate date sign recorded FeedCat Character String describing effort exerted beaver given sign geometry geometry data point location","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_FeedSigns.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Beaver Feeding Sign Locations recorded during the River Otter Beaver Trial. — RivOtter_FeedSigns","text":"https://www.exeter.ac.uk/creww/research/beavertrial/","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_OtherSigns.html","id":null,"dir":"Reference","previous_headings":"","what":"Beaver Dwelling and Dam Locations recorded during the River Otter Beaver Trial. — RivOtter_OtherSigns","title":"Beaver Dwelling and Dam Locations recorded during the River Otter Beaver Trial. — RivOtter_OtherSigns","text":"dataset ('sf' object) includes locations, survey times survey season beaver dwellings dams. data can used confirm reject automated territory status. Essentially, considered dams dwellings occur, area activity can considered territory.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_OtherSigns.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beaver Dwelling and Dam Locations recorded during the River Otter Beaver Trial. — RivOtter_OtherSigns","text":"","code":"RivOtter_OtherSigns"},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_OtherSigns.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Beaver Dwelling and Dam Locations recorded during the River Otter Beaver Trial. — RivOtter_OtherSigns","text":"sf object 3683 rows 4 variables: SurveySeason winter season sign surveyed RecordDate date sign recorded SignType Character String describing type sign geometry geometry data point location","code":""},{"path":"h-a-graham.github.io/beavertools/reference/RivOtter_OtherSigns.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Beaver Dwelling and Dam Locations recorded during the River Otter Beaver Trial. — RivOtter_OtherSigns","text":"https://www.exeter.ac.uk/creww/research/beavertrial/","code":""},{"path":"h-a-graham.github.io/beavertools/reference/animate_capacity.html","id":null,"dir":"Reference","previous_headings":"","what":"Animate the spread of simulated territories from beavertools::territory_cap() — animate_capacity","title":"Animate the spread of simulated territories from beavertools::territory_cap() — animate_capacity","text":"(somewhat experimental) funtion allows user simulate expansion beaver populations. present isvery simple territories largest channels best habitat occupied first. intend develop function allow alternative expansion hypotheses.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/animate_capacity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Animate the spread of simulated territories from beavertools::territory_cap() — animate_capacity","text":"","code":"animate_capacity(   terr_capacity,   buffer = 50,   river_net = NULL,   basemap = TRUE,   basemap_type = \"osmgrayscale\",   axes_units = TRUE,   scalebar = TRUE,   scalebar_loc = \"tl\",   north_arrow = TRUE,   north_arrow_loc = \"br\",   north_arrow_size = 0.75,   wgs = FALSE,   guide = FALSE,   catchment = NULL,   rivers = FALSE,   add_hillshade = FALSE,   plot_extent = NULL,   filename = NULL,   x_pix = 1200,   y_pix = 675,   pix_res = 96,   n_frames = 3,   fps = 5 )"},{"path":"h-a-graham.github.io/beavertools/reference/animate_capacity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Animate the spread of simulated territories from beavertools::territory_cap() — animate_capacity","text":"terr_capacity output beavertools::territory_cap() gives maximum number territories can fit within catchment. buffer buffer size use visualise territories - larger buffers better visualising territories can give impression overlap territories. river_net Supply river network BeaverNetwork useed generate terr_capacity object. added basemap layer display river network. basemap Boolean, include OSM basemap. (optional) basemap_type Character vector osm map type. options see rosm::osm.types() axes_units Boolean include coordinate values axis. scalebar Boolean include scalebar. scalebar_loc character vector scalebar location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow Boolean include north arrow north_arrow_loc character vector arrow location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow_size numeric vector arrow wgs Boolean transform coordinate reference system (CRS) WGS84 (EPSG:4326) guide Boolean include legend catchment sf object sf-readable file. See sf::st_drivers() available drivers. feature boundary catchment Area interest. used mask map region outside desired AOI. rivers Boolean include river lines (downloaded automatcally using osmdata package). Probably reuired 'river_net' argument supplied. add_hillshade Boolean add osm hillshade background map. can combined 'basemap_type' create textured basemap. plot_extent 'bbox', 'sf' 'sp' object defining desired plot extent. filename character string save path saving disk required. x_pix numeric denoting width animation canvas pixels y_pix numeric denoting height animation canvas pixels pix_res numeric denoting canvas resolution n_frames numeric number frames use transitions fps numeric number frames per second resulting animation terr_colours option supply custom colour palette. NULL random colour palette generated.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/animate_capacity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Animate the spread of simulated territories from beavertools::territory_cap() — animate_capacity","text":"animated map territory expansion capacity.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/animate_capacity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Animate the spread of simulated territories from beavertools::territory_cap() — animate_capacity","text":"","code":"# ---------- Subset dataset for example to reduce computation time ----------- BeavNetOtter <- RivOtter_BeaverNet[RivOtter_BeaverNet$Str_order > 3,]  # ---------- run terriroty generation -------- test_out <-  gen_territories(BeavNetOtter) #> Error in makePSOCKcluster(names = spec, ...): numeric 'names' must be >= 1  # ------------- Run territory cap ------------- test_TC_par <-territory_cap(test_out, multicore = TRUE) #> Error in dplyr::filter(., mean_BFI_40m >= min_veg): object 'test_out' not found  # now animate the spead of territories through catchment animate_capacity(test_TC_par, buffer = 75, river_net = BeavNetOtter,                            x_pix=600, y_pix=675) #> Error in nrow(terr_capacity): object 'test_TC_par' not found"},{"path":"h-a-graham.github.io/beavertools/reference/animate_maps.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to Animate a list of maps generated with either plot_territories or plot_forage_density — animate_maps","title":"Function to Animate a list of maps generated with either plot_territories or plot_forage_density — animate_maps","text":"function generates animation map time steps visualise change time using magick package.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/animate_maps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to Animate a list of maps generated with either plot_territories or plot_forage_density — animate_maps","text":"","code":"animate_maps(   map_list,   filename = NULL,   x_pix = 1200,   y_pix = 675,   pix_res = 96,   n_frames = 10,   fps = 5 )"},{"path":"h-a-graham.github.io/beavertools/reference/animate_maps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to Animate a list of maps generated with either plot_territories or plot_forage_density — animate_maps","text":"map_list list ggplot objects generated either  plot_territories plot_forage_density filename character string save path saving disk required. x_pix numeric denoting width animation canvas pixels y_pix numeric denoting height animation canvas pixels pix_res numeric denoting canvas resolution n_frames numeric number frames use transitions fps numeric number frames per second resulting animation","code":""},{"path":"h-a-graham.github.io/beavertools/reference/animate_maps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to Animate a list of maps generated with either plot_territories or plot_forage_density — animate_maps","text":"Animated map esither territory locations time feeding density time.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/animate_maps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to Animate a list of maps generated with either plot_territories or plot_forage_density — animate_maps","text":"","code":"# kde plots for panel/animation fsd_ggplot <- function(.data, p.names, p.ext, add_map_stuff= FALSE){   if (isTRUE(add_map_stuff)){    fsd <- plot_forage_density(.data, guide = FALSE, catchment = RivOtter_Catch_Area,                               rivers = TRUE, plot_extent = p.ext, axes_units = FALSE) +      ggplot2::labs(subtitle = sprintf('Beaver Foraging Density: %s', p.names))  } else {    fsd <- plot_forage_density(.data, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE, guide = FALSE,                               catchment = RivOtter_Catch_Area, rivers = TRUE, plot_extent = p.ext) +      ggplot2::labs(subtitle = p.names)  }   return(fsd) }  # get name list for plots plot_names <- unique(RivOtter_FeedSigns$SurveySeason)  ras_ext <- inflate_bbox(RivOtter_FeedSigns, 250)  # generate KDE rasters for all survey periods kde_ras_list <- RivOtter_FeedSigns %>%   dplyr::group_by(SurveySeason) %>%   dplyr::group_map(., ~forage_density(., 'FeedCat', kd_extent = ras_ext)) #>  #> calculating weighted kde #>  #> calculating weighted kde #>  #> calculating weighted kde #>  #> calculating weighted kde #>  #> calculating weighted kde #>  #> calculating weighted kde #>  #> calculating weighted kde  # animate kernel density rasters kde_animation <- kde_ras_list %>% purrr::map2(.x=., .y=plot_names, ~fsd_ggplot(.x, .y, inflate_bbox(RivOtter_Catch_Area, 200),   add_map_stuff = TRUE)) %>%   animate_maps(.) #> Error in geos_op2_geom(\"intersection\", x, y, ...): st_crs(x) == st_crs(y) is not TRUE"},{"path":"h-a-graham.github.io/beavertools/reference/check_auto_terr.html","id":null,"dir":"Reference","previous_headings":"","what":"Built in plotting function to check automated territory class assignment. — check_auto_terr","title":"Built in plotting function to check automated territory class assignment. — check_auto_terr","text":"Function plots automatically generated territory classifications corresponding ID numbers take note numbers missclassified correct using beavertools::user_classify()","code":""},{"path":"h-a-graham.github.io/beavertools/reference/check_auto_terr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built in plotting function to check automated territory class assignment. — check_auto_terr","text":"","code":"check_auto_terr(   terr_poly,   fill_col = c(\"#7EAAC7\", \"#F87223\", \"#61E265\"),   label = TRUE,   basemap = FALSE,   basemap_type = \"osmgrayscale\",   axes_units = TRUE,   scalebar = TRUE,   scalebar_loc = \"tl\",   north_arrow = TRUE,   north_arrow_loc = \"br\",   north_arrow_size = 0.75,   wgs = TRUE,   guide = TRUE,   plot_extent )"},{"path":"h-a-graham.github.io/beavertools/reference/check_auto_terr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Built in plotting function to check automated territory class assignment. — check_auto_terr","text":"terr_poly territory polygon created using beavertools::estimate_territories() fill_col character vector R colours HEX codes. label label activity areas polygon ID. important checking predicted classification basemap Boolean, include OSM basemap. (optional) basemap_type Character vector osm map type. options see rosm::osm.types() axes_units Boolean include coordinate values axis. scalebar Boolean include scalebar. scalebar_loc character vector scalebar location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow Boolean include north arrow north_arrow_loc character vector arrow location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow_size numeric vector arrow wgs Boolean transform coordinate reference system (CRS) WGS84 (EPSG:4326) guide Boolean include legend plot_extent 'bbox', 'sf' 'sp' object defining desired plot extent.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/check_auto_terr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Built in plotting function to check automated territory class assignment. — check_auto_terr","text":"ggplot object territory check map.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/check_auto_terr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Built in plotting function to check automated territory class assignment. — check_auto_terr","text":"","code":"# Here we filter the filter the built in 2019-2020 ROBT feeding sign data `RivOtter_FeedSigns` # Then pipe this 'sf' object to forage_density.  ROBT_201920 <- RivOtter_FeedSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")%>%   forage_density(., 'FeedCat') #> No value supplied for \"kd_extent\" argument: default extent will be used #>  #> calculating weighted kde  # Now we load the ROBT `RivOtter_OtherSigns` dataset and filter to the same # year as the forage density raster.  CS_201920 <- RivOtter_OtherSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")  # run territory classification otter_poly <- estimate_territories(ROBT_201920, confirm_signs = CS_201920)  # create the map for checking automated territory classification check_auto_terr(otter_poly, basemap=FALSE, label=TRUE)"},{"path":"h-a-graham.github.io/beavertools/reference/check_user_terr.html","id":null,"dir":"Reference","previous_headings":"","what":"Built in plotting function to check user-corrected territory class assignment. — check_user_terr","title":"Built in plotting function to check user-corrected territory class assignment. — check_user_terr","text":"Function plot user-corrected territory classes : beavertools::user_classify()","code":""},{"path":"h-a-graham.github.io/beavertools/reference/check_user_terr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built in plotting function to check user-corrected territory class assignment. — check_user_terr","text":"","code":"check_user_terr(   terr_poly,   fill_col = c(\"#7EAAC7\", \"#F87223\", \"#61E265\"),   label = TRUE,   basemap = FALSE,   basemap_type = \"osmgrayscale\",   axes_units = TRUE,   scalebar = TRUE,   scalebar_loc = \"tl\",   north_arrow = TRUE,   north_arrow_loc = \"br\",   north_arrow_size = 0.75,   wgs = TRUE,   guide = TRUE,   plot_extent )"},{"path":"h-a-graham.github.io/beavertools/reference/check_user_terr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Built in plotting function to check user-corrected territory class assignment. — check_user_terr","text":"terr_poly territory polygon created using beavertools::estimate_territories() fill_col character vector R colours HEX codes. label label activity areas polygon ID. important checking predicted classification basemap Boolean, include OSM basemap. (optional) basemap_type Character vector osm map type. options see rosm::osm.types() axes_units Boolean include coordinate values axis. scalebar Boolean include scalebar. scalebar_loc character vector scalebar location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow Boolean include north arrow north_arrow_loc character vector arrow location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow_size numeric vector arrow wgs Boolean transform coordinate reference system (CRS) WGS84 (EPSG:4326) guide Boolean include legend plot_extent 'bbox', 'sf' 'sp' object defining desired plot extent.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/check_user_terr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Built in plotting function to check user-corrected territory class assignment. — check_user_terr","text":"ggplot object territory check map.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/check_user_terr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Built in plotting function to check user-corrected territory class assignment. — check_user_terr","text":"","code":"# Here we filter the filter the built in 2019-2020 ROBT feeding sign data `RivOtter_FeedSigns` # Then pipe this 'sf' object to forage_density.  ROBT_201920 <- RivOtter_FeedSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")%>%   forage_density(., 'FeedCat') #> No value supplied for \"kd_extent\" argument: default extent will be used #>  #> calculating weighted kde  # Now we load the ROBT `RivOtter_OtherSigns` dataset and filter to the same # year as the forage density raster.  CS_201920 <- RivOtter_OtherSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")  # run territory classification otter_poly <- estimate_territories(ROBT_201920, confirm_signs = CS_201920)  # create the map for checking automated territory classification otter_poly_uc <- user_classify(otter_poly, territory = c(10, 28))  # generate the user territory check plot. check_user_terr(otter_poly_uc, basemap=FALSE)"},{"path":"h-a-graham.github.io/beavertools/reference/estimate_territories.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the number of territories in a catchment — estimate_territories","title":"Estimate the number of territories in a catchment — estimate_territories","text":"Uses kernel density maps estimate area territories locating areas activity contain foraging intensity given threshold, locates potential territories - confirm territories, confirmatory signs required including dam dwelling locations.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/estimate_territories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the number of territories in a catchment — estimate_territories","text":"","code":"estimate_territories(   forage_raster,   confirm_signs,   low_thresh = 0,   upper_thresh = 0.95 )"},{"path":"h-a-graham.github.io/beavertools/reference/estimate_territories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the number of territories in a catchment — estimate_territories","text":"forage_raster foraging density raster generated beavertools::forage_density() confirm_signs sf object sf-readable file. See sf::st_drivers() available drivers. containing 'confirmatory' field signs beaver dams lodges. required assign confidence classification areas activity either: 'Activity'. 'Possible' 'Territory'. low_thresh numeric 0 1. Used set minimum value activity. Lower values return information .e. area cover can result merging territories density increases. use lowest possible value. upper_thresh numeric 0 1. Used set minimum value core areas activity. central place forages, beavers feed near lodge, value idenitfies areas activity may indicate centre territory. default 0.95, may need adjusting depending territory density.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/estimate_territories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the number of territories in a catchment — estimate_territories","text":"'sf' polygon object defining areas beaver activity, kernel denisty summary stats territory status.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/estimate_territories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate the number of territories in a catchment — estimate_territories","text":"","code":"# Here we filter the filter the built in 2019-2020 ROBT feeding sign data `RivOtter_FeedSigns` # Then pipe this 'sf' object to forage_density.  ROBT_201920 <- RivOtter_FeedSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")%>%   forage_density(., 'FeedCat') #> No value supplied for \"kd_extent\" argument: default extent will be used #>  #> calculating weighted kde  # Now we load the ROBT `RivOtter_OtherSigns` dataset and filter to the same # year as the forage density raster.  CS_201920 <- RivOtter_OtherSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")  # run territory classification estimate_territories(ROBT_201920, confirm_signs = CS_201920) #> Simple feature collection with 46 features and 8 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 305220 ymin: 83180 xmax: 323000 ymax: 114360 #> Projected CRS: OSGB 1936 / British National Grid #> First 10 features: #>     quant quantf id Upper_Thresh Confirm_signs terr_status      mean_fd #> 1       0      0  1           No            No    Activity 1.380067e-12 #> 1.1     0      0  2           No            No    Activity 1.340421e-12 #> 1.2     0      0  3           No            No    Activity 1.034756e-12 #> 1.3     0      0  4           No            No    Activity 1.019890e-12 #> 1.4     0      0  5          Yes           Yes   Territory 2.339032e-07 #> 1.5     0      0  6          Yes           Yes   Territory 1.191316e-07 #> 1.6     0      0  7           No            No    Activity 1.427402e-12 #> 1.7     0      0  8           No            No    Activity 1.004674e-12 #> 1.8     0      0  9           No            No    Activity 1.018443e-12 #> 1.9     0      0 10          Yes            No    Possible 4.275207e-08 #>           sum_fd                       geometry #> 1   7.590369e-11 POLYGON ((307500 83200, 307... #> 1.1 7.372312e-11 POLYGON ((307500 83560, 307... #> 1.2 9.312801e-12 POLYGON ((307540 83800, 307... #> 1.3 9.179009e-12 POLYGON ((307600 83940, 307... #> 1.4 1.022859e-03 POLYGON ((307920 84060, 307... #> 1.5 1.934697e-04 POLYGON ((306020 84800, 306... #> 1.6 7.422492e-11 POLYGON ((308720 86460, 308... #> 1.7 3.014022e-12 POLYGON ((308640 88020, 308... #> 1.8 3.055329e-12 POLYGON ((308520 88180, 308... #> 1.9 1.285127e-04 POLYGON ((308840 88660, 308..."},{"path":"h-a-graham.github.io/beavertools/reference/forage_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to generate Kernel Density plot from Beaver Forage Data — forage_density","title":"Function to generate Kernel Density plot from Beaver Forage Data — forage_density","text":"function allows users generate kernel density raster collection points.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/forage_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to generate Kernel Density plot from Beaver Forage Data — forage_density","text":"","code":"forage_density(   forage_points,   impact_cat,   grid_size = 20,   kern_bw = 250,   kd_extent,   kd_weights = c(1, 1000, 1e+06),   low_thresh = 1e-12,   standardise = FALSE )"},{"path":"h-a-graham.github.io/beavertools/reference/forage_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to generate Kernel Density plot from Beaver Forage Data — forage_density","text":"forage_points foraging sign point data - must either sf object sf-readable file. See sf::st_drivers() available drivers impact_cat character vector length one containing column name describes feeding impact category (.e. Low, Medium, High). provided kernel density weighted grid_size raster grid cell size desired. kern_bw bandwidth kernel denisty search radius. kd_extent desired extent output raster. kd_weights numeric vector length equal number unique impact categories. low_thresh lower threshold setting minimum desired value. Values < low_thresh set NA. standardise Boolean specify densities shoul standardised 0-1.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/forage_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Function to generate Kernel Density plot from Beaver Forage Data — forage_density","text":"\"RasterLayer\" object kernel denisity estimates feeding signs","code":""},{"path":"h-a-graham.github.io/beavertools/reference/forage_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Function to generate Kernel Density plot from Beaver Forage Data — forage_density","text":"","code":"# Here we filter the filter the built in 2019-2020 ROBT feeding sign data `RivOtter_FeedSigns` # Then pipe this 'sf' object to forage_density.  RivOtter_FeedSigns %>%   dplyr::filter(SurveySeason == \"2019 - 2020\")%>%   forage_density(., 'FeedCat') #> No value supplied for \"kd_extent\" argument: default extent will be used #>  #> calculating weighted kde #> class      : RasterLayer  #> dimensions : 1583, 920, 1456360  (nrow, ncol, ncell) #> resolution : 20, 20  (x, y) #> extent     : 304880, 323280, 82840, 114500  (xmin, xmax, ymin, ymax) #> crs        : +proj=tmerc +lat_0=49 +lon_0=-2 +k=0.9996012717 +x_0=400000 +y_0=-100000 +ellps=airy +units=m +no_defs  #> source     : memory #> names      : kde  #> values     : 1.000071e-12, 3.214948e-06  (min, max) #>"},{"path":"h-a-graham.github.io/beavertools/reference/gen_territories.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate potential territories for all reaches of a BeaverNetwork dataset. — gen_territories","title":"Generate potential territories for all reaches of a BeaverNetwork dataset. — gen_territories","text":"Generates theoretical territory area every reach within catchment. Reaches must <1000m <200m recomended. Territory sizes (based length channel) randomly generated normal distribution using rnorm(1, 1630, 293) mean 1630 standard deviation 293m. range based empiracal studies: Campbell, et al. (2005); Vorel, et al. (2008), John Kostkan (2009), Graf, et al. (2016); Mayer, et al. (2017).","code":""},{"path":"h-a-graham.github.io/beavertools/reference/gen_territories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate potential territories for all reaches of a BeaverNetwork dataset. — gen_territories","text":"","code":"gen_territories(BeaverNetwork, progbar = TRUE, multicore = TRUE, ncores)"},{"path":"h-a-graham.github.io/beavertools/reference/gen_territories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate potential territories for all reaches of a BeaverNetwork dataset. — gen_territories","text":"BeaverNetwork river network attributed results Graham, et al., (2020) Macfarlane, et al., (2017) sf object sf-readable file. See sf::st_drivers() available drivers. progbar Boolean use progress bar monitor progress multicore Boolean multiple core - function can slow large catchments TRUE recomended. ncores numeric denoting number processes run function across. included, defaults : parallel::detectCores()[1]-2","code":""},{"path":"h-a-graham.github.io/beavertools/reference/gen_territories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate potential territories for all reaches of a BeaverNetwork dataset. — gen_territories","text":"'sf object containing potential territory area every reach input BeaverNetwork.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/gen_territories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate potential territories for all reaches of a BeaverNetwork dataset. — gen_territories","text":"","code":"# --- Subset dataset for example to reduce computation time  for example --- BeavNetOtter <- RivOtter_BeaverNet[RivOtter_BeaverNet$Str_order > 3,]  # ---------- run terriroty generation -------- gen_territories(BeavNetOtter) #> Error in makePSOCKcluster(names = spec, ...): numeric 'names' must be >= 1"},{"path":"h-a-graham.github.io/beavertools/reference/get_rivers.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve an Open Street Map River Network for a given catchment area — get_rivers","title":"Retrieve an Open Street Map River Network for a given catchment area — get_rivers","text":"function allows download river network layer 'sf' format catchment area choice. can useful making many plots area saves frequent calls OSM server plot using river = TRUE beavertools::terr_plot() beavertools::plot_forage_density() functions.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/get_rivers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve an Open Street Map River Network for a given catchment area — get_rivers","text":"","code":"get_rivers(catchment)"},{"path":"h-a-graham.github.io/beavertools/reference/get_rivers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve an Open Street Map River Network for a given catchment area — get_rivers","text":"catchment sf object sf-readable file catchment area area interest. See sf::st_drivers() available drivers.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/get_rivers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Retrieve an Open Street Map River Network for a given catchment area — get_rivers","text":"","code":"# this generates an sf object for the river network of the R. Otter catchment. rivs <- get_rivers(RivOtter_Catch_Area) #> Error in geos_op2_geom(\"intersection\", x, y, ...): st_crs(x) == st_crs(y) is not TRUE plot(sf::st_geometry(rivs)) #> Error in sf::st_geometry(rivs): object 'rivs' not found"},{"path":"h-a-graham.github.io/beavertools/reference/inflate_bbox.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to generate an inflated bbox for input to Kernel Density function — inflate_bbox","title":"A function to generate an inflated bbox for input to Kernel Density function — inflate_bbox","text":"generate bounding box based sf/sp (readable) object","code":""},{"path":"h-a-graham.github.io/beavertools/reference/inflate_bbox.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to generate an inflated bbox for input to Kernel Density function — inflate_bbox","text":"","code":"inflate_bbox(sp_obj, value, wgs = TRUE)"},{"path":"h-a-graham.github.io/beavertools/reference/inflate_bbox.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to generate an inflated bbox for input to Kernel Density function — inflate_bbox","text":"sp_obj Either sf object sf-readable file. See sf::st_drivers() available drivers. used basis bounding box. value numeric distance (units spatial object) inflate bounds . wgs Boolean determine box defined WGS84 CRS. default TRUE plays nicely ggspatial...","code":""},{"path":"h-a-graham.github.io/beavertools/reference/inflate_bbox.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to generate an inflated bbox for input to Kernel Density function — inflate_bbox","text":"object class \"bbox\" containing spatial coordinates bounding area","code":""},{"path":"h-a-graham.github.io/beavertools/reference/inflate_bbox.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to generate an inflated bbox for input to Kernel Density function — inflate_bbox","text":"","code":"# generate inflated (by 10m) bounding box for ROBT feeding signs inflate_bbox(RivOtter_FeedSigns, 10) #> Simple feature collection with 1 feature and 0 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 305466.8 ymin: 82137.99 xmax: 322774.8 ymax: 114169.4 #> Projected CRS: OSGB 1936 / British National Grid #>                         geometry #> 1 POLYGON ((305466.8 82137.99..."},{"path":"h-a-graham.github.io/beavertools/reference/panel_plot.html","id":null,"dir":"Reference","previous_headings":"","what":"generate a panel plot of multiple maps generated with plot_territories or plot_forage_density — panel_plot","title":"generate a panel plot of multiple maps generated with plot_territories or plot_forage_density — panel_plot","text":"Function help build panel plot consisting multiple plots different time periods.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/panel_plot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"generate a panel plot of multiple maps generated with plot_territories or plot_forage_density — panel_plot","text":"","code":"panel_plot(   terr_plot_list,   scalebar = TRUE,   scalebar_loc = \"tl\",   north_arrow = TRUE,   north_arrow_loc = \"br\",   north_arrow_size = 0.5,   guide = FALSE,   guide_fig_height = c(30, 1),   n_col = NULL )"},{"path":"h-a-graham.github.io/beavertools/reference/panel_plot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"generate a panel plot of multiple maps generated with plot_territories or plot_forage_density — panel_plot","text":"terr_plot_list list ggplots generated either plot_territories plot_forage_density scalebar Boolean add scalebar last plot sequence scalebar_loc character vector determine scalebar location final plot: 'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow Boolean add north arrow last plot sequence north_arrow_loc character vector determine north arrow location final plot: 'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow_size numeric set size north arrow guide Boolean - TRUE legend extracted list figures places panels guide_fig_height numeric vector length 2 - giving heights figure lengend objects. n_col integer denoting number columns panel use. NULL (default) number generated automatically ceiling(sqrt(length(terr_plot_list))).","code":""},{"path":"h-a-graham.github.io/beavertools/reference/panel_plot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"generate a panel plot of multiple maps generated with plot_territories or plot_forage_density — panel_plot","text":"TableGrob obect multi-panel map.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/panel_plot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"generate a panel plot of multiple maps generated with plot_territories or plot_forage_density — panel_plot","text":"","code":"#'# kde plots for panel/animation fsd_ggplot <- function(.data, p.names, p.ext, add_map_stuff= FALSE){   if (isTRUE(add_map_stuff)){    fsd <- plot_forage_density(.data, basemap = FALSE, guide = FALSE, catchment = RivOtter_Catch_Area,                               rivers = FALSE, plot_extent = p.ext, axes_units = FALSE) +      ggplot2::labs(subtitle = sprintf('Beaver Foraging Density: %s', p.names))  } else {    fsd <- plot_forage_density(.data, basemap = FALSE, axes_units = FALSE, north_arrow = FALSE, scalebar = FALSE, guide = FALSE,                               catchment = RivOtter_Catch_Area, rivers = FALSE, plot_extent = p.ext) +      ggplot2::labs(subtitle = p.names)  }   return(fsd) }  # get name list for plots plot_names <- unique(RivOtter_FeedSigns$SurveySeason)  ras_ext <- inflate_bbox(RivOtter_FeedSigns, 250)  # generate KDE rasters for all survey periods kde_ras_list <- RivOtter_FeedSigns %>%   dplyr::group_by(SurveySeason) %>%   dplyr::group_map(., ~forage_density(., 'FeedCat', kd_extent = ras_ext)) #>  #> calculating weighted kde #>  #> calculating weighted kde #>  #> calculating weighted kde #>  #> calculating weighted kde #>  #> calculating weighted kde #>  #> calculating weighted kde #>  #> calculating weighted kde  # generate panel plot showing sequence of feeding density maps kde_panel <- kde_ras_list %>%     purrr::map2(.x=., .y=plot_names, ~fsd_ggplot(.x, .y,                 inflate_bbox(RivOtter_Catch_Area, 200))) %>%     panel_plot(.)"},{"path":"h-a-graham.github.io/beavertools/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"re-export magrittr pipe operator — %>%","title":"re-export magrittr pipe operator — %>%","text":"re-export magrittr pipe operator","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_capacity.html","id":null,"dir":"Reference","previous_headings":"","what":"Built in plotting function for territory carrying capacity. — plot_capacity","title":"Built in plotting function for territory carrying capacity. — plot_capacity","text":"territory capacity generated using beavertools::territory_cap(), function can used plot results standardised way.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_capacity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built in plotting function for territory carrying capacity. — plot_capacity","text":"","code":"plot_capacity(   terr_capacity,   buffer = 50,   river_net = NULL,   basemap = TRUE,   basemap_type = \"osmgrayscale\",   axes_units = TRUE,   scalebar = TRUE,   scalebar_loc = \"tl\",   north_arrow = TRUE,   north_arrow_loc = \"br\",   north_arrow_size = 0.75,   wgs = FALSE,   guide = FALSE,   catchment = NULL,   rivers = FALSE,   add_hillshade = FALSE,   plot_extent = NULL,   terr_colours = NULL,   mask_fill = \"grey50\" )"},{"path":"h-a-graham.github.io/beavertools/reference/plot_capacity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Built in plotting function for territory carrying capacity. — plot_capacity","text":"terr_capacity output beavertools::territory_cap() gives maximum number territories can fit within catchment. buffer buffer size use visualise territories - larger buffers better visualising territories can give impression overlap territories. river_net Supply river network BeaverNetwork useed generate terr_capacity object. added basemap layer display river network. basemap Boolean, include OSM basemap. (optional) basemap_type Character vector osm map type. options see rosm::osm.types() axes_units Boolean include coordinate values axis. scalebar Boolean include scalebar. scalebar_loc character vector scalebar location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow Boolean include north arrow north_arrow_loc character vector arrow location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow_size numeric vector arrow wgs Boolean transform coordinate reference system (CRS) WGS84 (EPSG:4326) guide Boolean include legend catchment sf object sf-readable file. See sf::st_drivers() available drivers. feature boundary catchment Area interest. used mask map region outside desired AOI. rivers Boolean include river lines (downloaded automatcally using osmdata package). Probably reuired 'river_net' argument supplied. add_hillshade Boolean add osm hillshade background map. can combined 'basemap_type' create textured basemap. plot_extent 'bbox', 'sf' 'sp' object defining desired plot extent. terr_colours option supply custom colour palette. NULL random colour palette generated.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_capacity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Built in plotting function for territory carrying capacity. — plot_capacity","text":"ggplot object displays map territory capacity.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_capacity.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Built in plotting function for territory carrying capacity. — plot_capacity","text":"","code":"s #> Error in eval(expr, envir, enclos): object 's' not found # --- Subset dataset for example to reduce computation time --- BeavNetOtter <- RivOtter_BeaverNet[RivOtter_BeaverNet$Str_order > 3,]  # ---------- run terriroty generation -------- test_out <-  gen_territories(BeavNetOtter) #> Error in makePSOCKcluster(names = spec, ...): numeric 'names' must be >= 1  # ------------- Run territory cap ------------- test_TC_par <-territory_cap(test_out, multicore = TRUE) #> Error in dplyr::filter(., mean_BFI_40m >= min_veg): object 'test_out' not found  # Now plot... plot_capacity(test_TC_par, basemap=FALSE) #> Error in sf::st_buffer(., buffer, endCapStyle = \"FLAT\"): object 'test_TC_par' not found"},{"path":"h-a-graham.github.io/beavertools/reference/plot_feeding.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for feeding/foraging Locations. — plot_feeding","title":"Plotting function for feeding/foraging Locations. — plot_feeding","text":"function create ggplot feeding points confirmatory signs. just lazy wrapper beavertools::plot_territories tidies things bit. exaustive ","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_feeding.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for feeding/foraging Locations. — plot_feeding","text":"","code":"plot_feeding(   beav_points,   weight_aes = c(1, 3, 6),   fill_col = c(\"#1b9e77\", \"#7570b3\", \"#d95f02\"),   label = FALSE,   basemap = TRUE,   basemap_type = \"osmgrayscale\",   axes_units = TRUE,   scalebar = TRUE,   scalebar_loc = \"tl\",   north_arrow = TRUE,   north_arrow_loc = \"br\",   north_arrow_size = 0.75,   wgs = TRUE,   guide = TRUE,   guide_pos = \"bottom\",   seed = NA,   drop_act = FALSE,   trans_type = NULL,   catchment = NULL,   rivers = FALSE,   add_hillshade = FALSE,   plot_extent = NULL,   mask_fill = \"grey50\" )"},{"path":"h-a-graham.github.io/beavertools/reference/plot_feeding.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for feeding/foraging Locations. — plot_feeding","text":"beav_points 'sf' object containing location impact level beaver foraging signs weight_aes numeric vector length 3 1. length one points appear size plot. length equals 3, value used size aesthetic points based impact category. fill_col character vector R colours HEX codes. label label activity areas polygon ID. basemap Boolean, include OSM basemap. (optional) basemap_type Character vector osm map type. options see rosm::osm.types() axes_units Boolean include coordinate values axis. scalebar Boolean include scalebar. scalebar_loc character vector scalebar location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow Boolean include north arrow north_arrow_loc character vector arrow location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow_size numeric vector arrow wgs Boolean transform coordinate reference system (CRS) WGS84 (EPSG:4326) guide Boolean include legend guide_pos character vector describing desired position guide c(\"left\", \"right\", \"bottom\", \"top\") seed numeric seed number -useful using 'fill_name' = 'ID' set random colour palette. drop_act Boolean remove areas classified 'activity' creates plot shows possibl confirmed territories trans_type character - transformation type used fill_name=c('mean_fd', sum_fd'). catchment sf object sf-readable file. See sf::st_drivers() available drivers. feature boundary catchment Area interest. used mask map region outside desired AOI. rivers Boolean include river lines (downloaded automatcally using osmdata package) river network class 'sf' can generated beforehand using beavertools::get_rivers(). add_hillshade Boolean add osm hillshade background map. can combined 'basemap_type' create textured basemap. plot_extent 'bbox', 'sf' 'sp' object defining desired plot extent.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_feeding.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function for feeding/foraging Locations. — plot_feeding","text":"ggplot object map beaver feeding signs.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_feeding.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function for feeding/foraging Locations. — plot_feeding","text":"","code":"# Here we filter the filter the built in 2019-2020 ROBT feeding sign data `RivOtter_FeedSigns` # Then pipe this 'sf' object to plot_feeding.  RivOtter_FeedSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\") %>%   plot_feeding(., weight_aes=c(1,3,6), basemap=F,                catchment = RivOtter_Catch_Area, rivers = T) #> Error in geos_op2_geom(\"intersection\", x, y, ...): st_crs(x) == st_crs(y) is not TRUE"},{"path":"h-a-graham.github.io/beavertools/reference/plot_forage_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Built in plotting function for Kernel density Raster. — plot_forage_density","title":"Built in plotting function for Kernel density Raster. — plot_forage_density","text":"function provides simple way produce consistent maps Kernel density plots. Please aware 'basemap', 'rivers' 'add_hillshade' arguments  use following functions: rosm::osm.image() osmdata::opq() occasional fail busy server times.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_forage_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built in plotting function for Kernel density Raster. — plot_forage_density","text":"","code":"plot_forage_density(   kd_raster,   basemap = TRUE,   basemap_type = \"osmgrayscale\",   trans_fill = TRUE,   trans_type = \"log10\",   axes_units = TRUE,   scalebar = TRUE,   scalebar_loc = \"tl\",   north_arrow = TRUE,   north_arrow_loc = \"br\",   north_arrow_size = 0.75,   wgs = TRUE,   guide = TRUE,   catchment = NULL,   rivers = FALSE,   add_hillshade = FALSE,   plot_extent = NULL,   attribute = TRUE,   guide_width = NULL,   mask_fill = \"grey50\" )"},{"path":"h-a-graham.github.io/beavertools/reference/plot_forage_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Built in plotting function for Kernel density Raster. — plot_forage_density","text":"kd_raster Kernel Density raster generated beavertools::forage_density() basemap Boolean, include OSM basemap. (optional) basemap_type Character vector osm map type. options see rosm::osm.types() trans_fill Boolean transform colourmap - visualisation general better TRUE (default) trans_type Character vector type transform. axes_units Boolean include coordinate values axis. scalebar Boolean include scalebar. scalebar_loc character vector scalebar location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow Boolean include north arrow north_arrow_loc character vector arrow location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow_size numeric vector arrow wgs Boolean transform coordinate reference system (CRS) WGS84 (EPSG:4326) guide Boolean include legend catchment sf object sf-readable file. See sf::st_drivers() available drivers. feature boundary catchment Area interest. used mask map region outside desired AOI. rivers Boolean include river lines (downloaded automatcally using osmdata package) river network class 'sf' can generated beforehand using beavertools::get_rivers(). add_hillshade Boolean add osm hillshade background map. can combined 'basemap_type' create textured basemap. plot_extent 'bbox', 'sf' 'sp' object used set plot extent. attribute Boolean include open street map attribution.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_forage_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Built in plotting function for Kernel density Raster. — plot_forage_density","text":"ggplot object Kernel Density Map","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_forage_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Built in plotting function for Kernel density Raster. — plot_forage_density","text":"","code":"# Here we filter the filter the built in 2019-2020 ROBT feeding sign data `RivOtter_FeedSigns` # Then pipe this 'sf' object to forage_density.  ROBT_201920 <- RivOtter_FeedSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")%>%   forage_density(., 'FeedCat') #> No value supplied for \"kd_extent\" argument: default extent will be used #>  #> calculating weighted kde  # Now we plot the raster with plot_forage_density plot_forage_density(ROBT_201920, catchment = RivOtter_Catch_Area, rivers = TRUE,                                      trans_fill=TRUE) #> Error in geos_op2_geom(\"intersection\", x, y, ...): st_crs(x) == st_crs(y) is not TRUE"},{"path":"h-a-graham.github.io/beavertools/reference/plot_other_signs.html","id":null,"dir":"Reference","previous_headings":"","what":"Plotting function for Confirmatory sign (Dwelling and Dam) locations. — plot_other_signs","title":"Plotting function for Confirmatory sign (Dwelling and Dam) locations. — plot_other_signs","text":"function create ggplot feeding points confirmatory signs. just lazy wrapper beavertools::plot_territories tidies things bit. exaustive ","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_other_signs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plotting function for Confirmatory sign (Dwelling and Dam) locations. — plot_other_signs","text":"","code":"plot_other_signs(   beav_points,   size = 2.5,   fill_col = c(\"#e41a1c\", \"#4daf4a\", \"#d11141\"),   label = FALSE,   basemap = TRUE,   basemap_type = \"osmgrayscale\",   axes_units = TRUE,   scalebar = TRUE,   scalebar_loc = \"tl\",   north_arrow = TRUE,   north_arrow_loc = \"br\",   north_arrow_size = 0.75,   wgs = TRUE,   guide = TRUE,   guide_pos = \"bottom\",   seed = NA,   drop_act = FALSE,   trans_type = NULL,   catchment = NULL,   rivers = FALSE,   add_hillshade = FALSE,   plot_extent = NULL,   mask_fill = \"grey50\" )"},{"path":"h-a-graham.github.io/beavertools/reference/plot_other_signs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plotting function for Confirmatory sign (Dwelling and Dam) locations. — plot_other_signs","text":"beav_points 'sf' object containing location beaver dwellings dams. Alternative signs labelled '' size numeric vector length 1 denoting point size used ggplot2. fill_col character vector R colours HEX codes. label label activity areas polygon ID. basemap Boolean, include OSM basemap. (optional) basemap_type Character vector osm map type. options see rosm::osm.types() axes_units Boolean include coordinate values axis. scalebar Boolean include scalebar. scalebar_loc character vector scalebar location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow Boolean include north arrow north_arrow_loc character vector arrow location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow_size numeric vector arrow wgs Boolean transform coordinate reference system (CRS) WGS84 (EPSG:4326) guide Boolean include legend guide_pos character vector describing desired position guide c(\"left\", \"right\", \"bottom\", \"top\") seed numeric seed number -useful using 'fill_name' = 'ID' set random colour palette. drop_act Boolean remove areas classified 'activity' creates plot shows possibl confirmed territories trans_type character - transformation type used fill_name=c('mean_fd', sum_fd'). catchment sf object sf-readable file. See sf::st_drivers() available drivers. feature boundary catchment Area interest. used mask map region outside desired AOI. rivers Boolean include river lines (downloaded automatcally using osmdata package) river network class 'sf' can generated beforehand using beavertools::get_rivers(). add_hillshade Boolean add osm hillshade background map. can combined 'basemap_type' create textured basemap. plot_extent 'bbox', 'sf' 'sp' object defining desired plot extent.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_other_signs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plotting function for Confirmatory sign (Dwelling and Dam) locations. — plot_other_signs","text":"ggplot object confirmatory signs map.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_other_signs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plotting function for Confirmatory sign (Dwelling and Dam) locations. — plot_other_signs","text":"","code":"# Here we filter the filter the built in 2019-2020 ROBT confirmatory sign data `RivOtter_OtherSigns` # Then pipe this 'sf' object to plot_feeding.  RivOtter_OtherSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\") %>%   plot_other_signs(., size = 1.5,basemap=T, catchment = RivOtter_Catch_Area,                    rivers = T, plot_extent = inflate_bbox(RivOtter_Catch_Area, 200)) #> Error in geos_op2_geom(\"intersection\", x, y, ...): st_crs(x) == st_crs(y) is not TRUE"},{"path":"h-a-graham.github.io/beavertools/reference/plot_territories.html","id":null,"dir":"Reference","previous_headings":"","what":"Built in plotting function for territory polygons. — plot_territories","title":"Built in plotting function for territory polygons. — plot_territories","text":"function create ggplot territory zones.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_territories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Built in plotting function for territory polygons. — plot_territories","text":"","code":"plot_territories(   terr_poly,   fill_name,   fill_col = c(\"#7EAAC7\", \"#F87223\", \"#61E265\"),   label = FALSE,   basemap = TRUE,   basemap_type = \"osmgrayscale\",   axes_units = TRUE,   scalebar = TRUE,   scalebar_loc = \"tl\",   north_arrow = TRUE,   north_arrow_loc = \"br\",   north_arrow_size = 0.75,   wgs = TRUE,   guide = TRUE,   guide_pos = \"right\",   seed = NA,   drop_act = FALSE,   trans_type = NULL,   catchment = NULL,   rivers = FALSE,   add_hillshade = FALSE,   plot_extent = NULL,   mask_fill = \"grey50\" )"},{"path":"h-a-graham.github.io/beavertools/reference/plot_territories.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Built in plotting function for territory polygons. — plot_territories","text":"terr_poly territory polygon created using beavertools::estimate_territories() fill_name character vector containing name column used fill aesthetic. choose : 'terr_status', 'user_class', 'mean_fd', sum_fd' 'id'. fill_col character vector R colours HEX codes. label label activity areas polygon ID. basemap Boolean, include OSM basemap. (optional) basemap_type Character vector osm map type. options see rosm::osm.types() axes_units Boolean include coordinate values axis. scalebar Boolean include scalebar. scalebar_loc character vector scalebar location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow Boolean include north arrow north_arrow_loc character vector arrow location one :'tl', 'bl', 'tr', 'br' Meaning \"top left\" etc. north_arrow_size numeric vector arrow wgs Boolean transform coordinate reference system (CRS) WGS84 (EPSG:4326) guide Boolean include legend guide_pos character denoting position legend c('left, 'right, 'bottom', 'top) seed numeric seed number -useful using 'fill_name' = 'ID' set random colour palette. drop_act Boolean remove areas classified 'activity' creates plot shows possibl confirmed territories trans_type character - transformation type used fill_name=c('mean_fd', sum_fd'). catchment sf object sf-readable file. See sf::st_drivers() available drivers. feature boundary catchment Area interest. used mask map region outside desired AOI. rivers Boolean include river lines (downloaded automatcally using osmdata package) river network class 'sf' can generated beforehand using beavertools::get_rivers(). add_hillshade Boolean add osm hillshade background map. can combined 'basemap_type' create textured basemap. plot_extent 'bbox', 'sf' 'sp' object defining desired plot extent.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_territories.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Built in plotting function for territory polygons. — plot_territories","text":"ggplot object territory check map.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/plot_territories.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Built in plotting function for territory polygons. — plot_territories","text":"","code":"# Here we filter the filter the built in 2019-2020 ROBT feeding sign data `RivOtter_FeedSigns` # Then pipe this 'sf' object to forage_density.  ROBT_201920 <- RivOtter_FeedSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")%>%   forage_density(., 'FeedCat') #> No value supplied for \"kd_extent\" argument: default extent will be used #>  #> calculating weighted kde  # Now we load the ROBT `RivOtter_OtherSigns` dataset and filter to the same # year as the forage density raster.  CS_201920 <- RivOtter_OtherSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")  # run territory classification otter_poly <- estimate_territories(ROBT_201920, confirm_signs = CS_201920)  # various options: plot_territories(otter_poly, 'mean_fd', basemap=FALSE)  plot_territories(otter_poly, 'sum_fd', basemap=FALSE, trans_type = 'log10')  plot_territories(otter_poly, 'id', basemap=TRUE, guide = FALSE, label = TRUE,                 drop_act = TRUE, axes_units = FALSE, rivers = TRUE) #> \"rivers\" argument ignored. A valid \"catchment\" area is required. #> Zoom: 12 #> Fetching 24 missing tiles #>    |                                                                               |                                                                      |   0%   |                                                                               |===                                                                   |   4%   |                                                                               |======                                                                |   8%   |                                                                               |=========                                                             |  12%   |                                                                               |============                                                          |  17%   |                                                                               |===============                                                       |  21%   |                                                                               |==================                                                    |  25%   |                                                                               |====================                                                  |  29%   |                                                                               |=======================                                               |  33%   |                                                                               |==========================                                            |  38%   |                                                                               |=============================                                         |  42%   |                                                                               |================================                                      |  46%   |                                                                               |===================================                                   |  50%   |                                                                               |======================================                                |  54%   |                                                                               |=========================================                             |  58%   |                                                                               |============================================                          |  62%   |                                                                               |===============================================                       |  67%   |                                                                               |==================================================                    |  71%   |                                                                               |====================================================                  |  75%   |                                                                               |=======================================================               |  79%   |                                                                               |==========================================================            |  83%   |                                                                               |=============================================================         |  88%   |                                                                               |================================================================      |  92%   |                                                                               |===================================================================   |  96%   |                                                                               |======================================================================| 100% #> ...complete!"},{"path":"h-a-graham.github.io/beavertools/reference/sim_terr_cap.html","id":null,"dir":"Reference","previous_headings":"","what":"A function to run a territory capacity simulation — sim_terr_cap","title":"A function to run a territory capacity simulation — sim_terr_cap","text":"function can used run territory capacity simulaitons, randomised elements program include generation random territory sizes reach. Secondly potential territory scenarios, simulation carried test effect different minimum habitat requirements. helps provide idea uncertainty involved generated territory capacity estimates.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/sim_terr_cap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A function to run a territory capacity simulation — sim_terr_cap","text":"","code":"sim_terr_cap(   BeaverNetwork,   n_p_terr_sim = 1,   n_hab_sim = 5,   min_veg = c(1.5, 4),   progbar = TRUE )"},{"path":"h-a-graham.github.io/beavertools/reference/sim_terr_cap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A function to run a territory capacity simulation — sim_terr_cap","text":"BeaverNetwork river network attributed results Graham, et al., (2020) Macfarlane, et al., (2017) sf object sf-readable file. See sf::st_drivers() available drivers. n_p_terr_sim Numeric denoting number random potential territory simulation undertake. n_hab_sim Numeric defines number minimum habitat quality scenarios test range given 'min_veg' min_veg Numeric vector length two sets range minimum habitat values tested simulation progbar Boolean use progress bar monitor progress","code":""},{"path":"h-a-graham.github.io/beavertools/reference/sim_terr_cap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A function to run a territory capacity simulation — sim_terr_cap","text":"'sf' object containing results simulation. row dissolved geometry simulated territories. Additional information simulation includes number territories, minimum vegetation value used simulation number.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/sim_terr_cap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A function to run a territory capacity simulation — sim_terr_cap","text":"","code":"# --- Subset dataset for example to reduce computation time  --- BeavNetOtter <- RivOtter_BeaverNet[RivOtter_BeaverNet$Str_order > 3,]  # --- run simple simulation...  sim_terr_cap(BeavNetOtter, n_p_terr_sim=2, n_hab_sim=2, min_veg = c(1.3, 1.8)) #> Simulation 1/2: #> Error in makePSOCKcluster(names = spec, ...): numeric 'names' must be >= 1"},{"path":"h-a-graham.github.io/beavertools/reference/territory_cap.html","id":null,"dir":"Reference","previous_headings":"","what":"Beaver territory capacity simulation — territory_cap","title":"Beaver territory capacity simulation — territory_cap","text":"Function estimate territory capacity catchment beavers. potential territories iteratively compared select suitable habitats intersect. Stream size habitat quality prioritised terrtories larger rivers better habitat considered suitable.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/territory_cap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beaver territory capacity simulation — territory_cap","text":"","code":"territory_cap(   territories,   min_veg = 2.5,   min_bdc = 1,   progbars = TRUE,   multicore = FALSE,   ncores )"},{"path":"h-a-graham.github.io/beavertools/reference/territory_cap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beaver territory capacity simulation — territory_cap","text":"territories potential terrtory areas produced using beavertools::gen_territories() min_veg Numeric vector describing minimum vegetation index value can support beaver territory. min_bdc Numeric vector describing minimum Beaver Dam Capacity reaches Stream Order <=4. multicore Boolean multiple core - function can slow large catchments setting TRUE can speed things . ncores numeric denoting number processes run function across. included, defaults : parallel::detectCores()[1]-2 progbar Boolean use progress bar monitor progress","code":""},{"path":"h-a-graham.github.io/beavertools/reference/territory_cap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beaver territory capacity simulation — territory_cap","text":"'sf' object containing viable territories, total equals territory capacity.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/territory_cap.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beaver territory capacity simulation — territory_cap","text":"","code":"# --- Subset dataset for example to reduce computation time --- BeavNetOtter <- RivOtter_BeaverNet[RivOtter_BeaverNet$Str_order > 3,]  # ---------- run terriroty generation -------- poss_terrs <-  gen_territories(BeavNetOtter) #> Error in makePSOCKcluster(names = spec, ...): numeric 'names' must be >= 1  # ------------- Run territory cap ------------- territory_cap(poss_terrs, multicore = TRUE) #> Error in dplyr::filter(., mean_BFI_40m >= min_veg): object 'poss_terrs' not found"},{"path":"h-a-graham.github.io/beavertools/reference/user_classify.html","id":null,"dir":"Reference","previous_headings":"","what":"Add user specified classification of territory areas — user_classify","title":"Add user specified classification of territory areas — user_classify","text":"Opportunity add new column 'user_class' enables user confirm reject automated assessment territory areas.","code":""},{"path":"h-a-graham.github.io/beavertools/reference/user_classify.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add user specified classification of territory areas — user_classify","text":"","code":"user_classify(   territory_poly,   territory = NULL,   possible = NULL,   activity = NULL )"},{"path":"h-a-graham.github.io/beavertools/reference/user_classify.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add user specified classification of territory areas — user_classify","text":"territory_poly territory polygon generated beavertools::estimate_territories() territory numeric vector containing ID numbers areas reclassified 'Territory'. e.g. c(10, 28) possible numeric vector containing ID numbers areas reclassified 'Possible' activity numeric vector containing ID numbers areas reclassified 'Activity'","code":""},{"path":"h-a-graham.github.io/beavertools/reference/user_classify.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add user specified classification of territory areas — user_classify","text":"territory_poly returned additional column 'user_class'","code":""},{"path":"h-a-graham.github.io/beavertools/reference/user_classify.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add user specified classification of territory areas — user_classify","text":"","code":"# Here we filter the filter the built in 2019-2020 ROBT feeding sign data `RivOtter_FeedSigns` # Then pipe this 'sf' object to forage_density. ROBT_201920 <- RivOtter_FeedSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")%>%   forage_density(., 'FeedCat') #> No value supplied for \"kd_extent\" argument: default extent will be used #>  #> calculating weighted kde  # Now we load the ROBT `RivOtter_OtherSigns` dataset and filter to the same # year as the forage density raster.  CS_201920 <- RivOtter_OtherSigns %>% dplyr::filter(SurveySeason == \"2019 - 2020\")  # run territory classification otter_poly <- estimate_territories(ROBT_201920, confirm_signs = CS_201920)  # create the map for checking automated territory classification check_auto_terr(otter_poly, basemap=FALSE, label=TRUE)   user_classify(otter_poly, territory = c(10, 28)) #> Simple feature collection with 46 features and 9 fields #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 305220 ymin: 83180 xmax: 323000 ymax: 114360 #> Projected CRS: OSGB 1936 / British National Grid #> First 10 features: #>     quant quantf id Upper_Thresh Confirm_signs terr_status user_class #> 1       0      0  1           No            No    Activity   Activity #> 1.1     0      0  2           No            No    Activity   Activity #> 1.2     0      0  3           No            No    Activity   Activity #> 1.3     0      0  4           No            No    Activity   Activity #> 1.4     0      0  5          Yes           Yes   Territory  Territory #> 1.5     0      0  6          Yes           Yes   Territory  Territory #> 1.6     0      0  7           No            No    Activity   Activity #> 1.7     0      0  8           No            No    Activity   Activity #> 1.8     0      0  9           No            No    Activity   Activity #> 1.9     0      0 10          Yes            No    Possible  Territory #>          mean_fd       sum_fd                       geometry #> 1   1.380067e-12 7.590369e-11 POLYGON ((307500 83200, 307... #> 1.1 1.340421e-12 7.372312e-11 POLYGON ((307500 83560, 307... #> 1.2 1.034756e-12 9.312801e-12 POLYGON ((307540 83800, 307... #> 1.3 1.019890e-12 9.179009e-12 POLYGON ((307600 83940, 307... #> 1.4 2.339032e-07 1.022859e-03 POLYGON ((307920 84060, 307... #> 1.5 1.191316e-07 1.934697e-04 POLYGON ((306020 84800, 306... #> 1.6 1.427402e-12 7.422492e-11 POLYGON ((308720 86460, 308... #> 1.7 1.004674e-12 3.014022e-12 POLYGON ((308640 88020, 308... #> 1.8 1.018443e-12 3.055329e-12 POLYGON ((308520 88180, 308... #> 1.9 4.275207e-08 1.285127e-04 POLYGON ((308840 88660, 308..."}]
